
CANShield_2017.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000198  00800100  000014f8  0000158c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001d6  00800298  00800298  00001724  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001724  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001780  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000017bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a14  00000000  00000000  00001854  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000518  00000000  00000000  00002268  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c2  00000000  00000000  00002780  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  00002c44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000383  00000000  00000000  00002df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000852  00000000  00000000  00003173  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000039c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_18>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      54:	0c 94 84 02 	jmp	0x508	; 0x508 <__vector_21>
      58:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      68:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      6c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      70:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      74:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      78:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      7c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      80:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      84:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      88:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      8c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      90:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d8 e0       	ldi	r29, 0x08	; 8
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	12 e0       	ldi	r17, 0x02	; 2
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e8 ef       	ldi	r30, 0xF8	; 248
      a8:	f4 e1       	ldi	r31, 0x14	; 20
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0
      b0:	a8 39       	cpi	r26, 0x98	; 152
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
      b6:	24 e0       	ldi	r18, 0x04	; 4
      b8:	a8 e9       	ldi	r26, 0x98	; 152
      ba:	b2 e0       	ldi	r27, 0x02	; 2
      bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
      be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
      c0:	ae 36       	cpi	r26, 0x6E	; 110
      c2:	b2 07       	cpc	r27, r18
      c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
      c6:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <main>
      ca:	0c 94 7a 0a 	jmp	0x14f4	; 0x14f4 <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <__vector_18>:

/**************************************************************************************************
*   CAN ISR - See 'can.h' Header file for Description
**************************************************************************************************/
ISR(CANIT_vect)
{
      d2:	1f 92       	push	r1
      d4:	0f 92       	push	r0
      d6:	0f b6       	in	r0, 0x3f	; 63
      d8:	0f 92       	push	r0
      da:	11 24       	eor	r1, r1
      dc:	2f 93       	push	r18
      de:	3f 93       	push	r19
      e0:	4f 93       	push	r20
      e2:	5f 93       	push	r21
      e4:	6f 93       	push	r22
      e6:	8f 93       	push	r24
      e8:	9f 93       	push	r25
      ea:	af 93       	push	r26
      ec:	bf 93       	push	r27
      ee:	ef 93       	push	r30
      f0:	ff 93       	push	r31
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
      f6:	1f 92       	push	r1
      f8:	cd b7       	in	r28, 0x3d	; 61
      fa:	de b7       	in	r29, 0x3e	; 62
	unsigned char can_irq;
	volatile unsigned char canstmod;

	can_irq = CANSIT2;
      fc:	80 91 e0 00 	lds	r24, 0x00E0

	// TX
	if (can_irq & (1 << SIT0) && CANIE2 & (1 << ENMOB0)) {
     100:	80 ff       	sbrs	r24, 0
     102:	47 c0       	rjmp	.+142    	; 0x192 <__vector_18+0xc0>
     104:	90 91 de 00 	lds	r25, 0x00DE
     108:	90 ff       	sbrs	r25, 0
     10a:	43 c0       	rjmp	.+134    	; 0x192 <__vector_18+0xc0>
		//Select TX Mob (=Mob0)
		CANPAGE = 0 << 4;
     10c:	10 92 ed 00 	sts	0x00ED, r1
		canstmod = CANSTMOB;
     110:	ee ee       	ldi	r30, 0xEE	; 238
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	89 83       	std	Y+1, r24	; 0x01
		CANSTMOB&= ~(1 << TXOK);		//clear MB1, TX interrupt
     118:	80 81       	ld	r24, Z
     11a:	8f 7b       	andi	r24, 0xBF	; 191
     11c:	80 83       	st	Z, r24
		if (tx_on != tx_off) {
     11e:	80 91 9d 02 	lds	r24, 0x029D
     122:	90 91 9c 02 	lds	r25, 0x029C
     126:	98 17       	cp	r25, r24
     128:	89 f1       	breq	.+98     	; 0x18c <__vector_18+0xba>
			unsigned char pos;
			pos = tx_off & (TX_SIZE-1);
     12a:	87 70       	andi	r24, 0x07	; 7
			//set ID
			CANIDT4 = tx_frames[pos].array[0];
     12c:	2b e0       	ldi	r18, 0x0B	; 11
     12e:	82 9f       	mul	r24, r18
     130:	c0 01       	movw	r24, r0
     132:	11 24       	eor	r1, r1
     134:	fc 01       	movw	r30, r24
     136:	ea 50       	subi	r30, 0x0A	; 10
     138:	fd 4f       	sbci	r31, 0xFD	; 253
     13a:	20 81       	ld	r18, Z
     13c:	20 93 f0 00 	sts	0x00F0, r18
			CANIDT2 = tx_frames[pos].array[0];
     140:	20 81       	ld	r18, Z
     142:	20 93 f2 00 	sts	0x00F2, r18
			CANIDT1 = tx_frames[pos].array[1];
     146:	21 81       	ldd	r18, Z+1	; 0x01
     148:	20 93 f3 00 	sts	0x00F3, r18

			//program data registers - auto increment CANMSG
			CANMSG = tx_frames[pos].data[0];
     14c:	23 81       	ldd	r18, Z+3	; 0x03
     14e:	aa ef       	ldi	r26, 0xFA	; 250
     150:	b0 e0       	ldi	r27, 0x00	; 0
     152:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[1];
     154:	24 81       	ldd	r18, Z+4	; 0x04
     156:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[2];
     158:	25 81       	ldd	r18, Z+5	; 0x05
     15a:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[3];
     15c:	26 81       	ldd	r18, Z+6	; 0x06
     15e:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[4];
     160:	27 81       	ldd	r18, Z+7	; 0x07
     162:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[5];
     164:	20 85       	ldd	r18, Z+8	; 0x08
     166:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[6];
     168:	21 85       	ldd	r18, Z+9	; 0x09
     16a:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[7];
     16c:	22 85       	ldd	r18, Z+10	; 0x0a
     16e:	2c 93       	st	X, r18
			//set length and request send
			CANCDMOB = _BV(CONMOB0) | CAN_IDE | tx_frames[pos].length;
     170:	fc 01       	movw	r30, r24
     172:	e8 50       	subi	r30, 0x08	; 8
     174:	fd 4f       	sbci	r31, 0xFD	; 253
     176:	80 81       	ld	r24, Z
     178:	8f 70       	andi	r24, 0x0F	; 15
     17a:	80 64       	ori	r24, 0x40	; 64
     17c:	80 93 ef 00 	sts	0x00EF, r24
			tx_off++;
     180:	80 91 9d 02 	lds	r24, 0x029D
     184:	8f 5f       	subi	r24, 0xFF	; 255
     186:	80 93 9d 02 	sts	0x029D, r24
     18a:	7d c0       	rjmp	.+250    	; 0x286 <__vector_18+0x1b4>
		}
		else {
			tx_busy = 0;
     18c:	10 92 9b 02 	sts	0x029B, r1
     190:	7a c0       	rjmp	.+244    	; 0x286 <__vector_18+0x1b4>
		}
	}
	// RX
	else if (can_irq & (1 << SIT1) && CANIE2 & (1 << ENMOB1)) {
     192:	81 ff       	sbrs	r24, 1
     194:	78 c0       	rjmp	.+240    	; 0x286 <__vector_18+0x1b4>
     196:	80 91 de 00 	lds	r24, 0x00DE
     19a:	81 ff       	sbrs	r24, 1
     19c:	74 c0       	rjmp	.+232    	; 0x286 <__vector_18+0x1b4>
		//Select RX Mob (=Mob1)
		CANPAGE = 1 << 4;							//Switch to Mob 1 access
     19e:	80 e1       	ldi	r24, 0x10	; 16
     1a0:	80 93 ed 00 	sts	0x00ED, r24
		if (((rx_on - rx_off) & RX_ABS_MASK) < RX_SIZE) {
     1a4:	80 91 99 02 	lds	r24, 0x0299
     1a8:	28 2f       	mov	r18, r24
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	90 91 9a 02 	lds	r25, 0x029A
     1b0:	29 1b       	sub	r18, r25
     1b2:	31 09       	sbc	r19, r1
     1b4:	2f 77       	andi	r18, 0x7F	; 127
     1b6:	33 27       	eor	r19, r19
     1b8:	28 30       	cpi	r18, 0x08	; 8
     1ba:	31 05       	cpc	r19, r1
     1bc:	0c f0       	brlt	.+2      	; 0x1c0 <__vector_18+0xee>
     1be:	58 c0       	rjmp	.+176    	; 0x270 <__vector_18+0x19e>
			unsigned char pos;
			pos = rx_on & (RX_SIZE-1);
     1c0:	e8 2f       	mov	r30, r24
     1c2:	e7 70       	andi	r30, 0x07	; 7
			//Read length
			rx_frames[pos].length = CANCDMOB & 0x0F;
     1c4:	90 91 ef 00 	lds	r25, 0x00EF
     1c8:	2e 2f       	mov	r18, r30
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	4b e0       	ldi	r20, 0x0B	; 11
     1ce:	e4 9f       	mul	r30, r20
     1d0:	f0 01       	movw	r30, r0
     1d2:	11 24       	eor	r1, r1
     1d4:	e2 56       	subi	r30, 0x62	; 98
     1d6:	fd 4f       	sbci	r31, 0xFD	; 253
     1d8:	9f 70       	andi	r25, 0x0F	; 15
     1da:	42 81       	ldd	r20, Z+2	; 0x02
     1dc:	40 7f       	andi	r20, 0xF0	; 240
     1de:	94 2b       	or	r25, r20
     1e0:	92 83       	std	Z+2, r25	; 0x02
			//Read ID
			rx_frames[pos].array[0] = (CANIDT2 & 0xE0) | (CANIDT4 & 0x07);
     1e2:	90 91 f2 00 	lds	r25, 0x00F2
     1e6:	40 91 f0 00 	lds	r20, 0x00F0
     1ea:	47 70       	andi	r20, 0x07	; 7
     1ec:	90 7e       	andi	r25, 0xE0	; 224
     1ee:	94 2b       	or	r25, r20
     1f0:	90 83       	st	Z, r25
			rx_frames[pos].array[1] = CANIDT1;
     1f2:	90 91 f3 00 	lds	r25, 0x00F3
     1f6:	91 83       	std	Z+1, r25	; 0x01

			//read data registers - auto increment CANMSG
			rx_frames[pos].data[0] = CANMSG;
     1f8:	aa ef       	ldi	r26, 0xFA	; 250
     1fa:	b0 e0       	ldi	r27, 0x00	; 0
     1fc:	9c 91       	ld	r25, X
     1fe:	93 83       	std	Z+3, r25	; 0x03
			rx_frames[pos].data[1] = CANMSG;
     200:	9c 91       	ld	r25, X
     202:	94 83       	std	Z+4, r25	; 0x04
			rx_frames[pos].data[2] = CANMSG;
     204:	9c 91       	ld	r25, X
     206:	95 83       	std	Z+5, r25	; 0x05
			rx_frames[pos].data[3] = CANMSG;
     208:	9c 91       	ld	r25, X
     20a:	96 83       	std	Z+6, r25	; 0x06
			rx_frames[pos].data[4] = CANMSG;
     20c:	9c 91       	ld	r25, X
     20e:	97 83       	std	Z+7, r25	; 0x07
			rx_frames[pos].data[5] = CANMSG;
     210:	9c 91       	ld	r25, X
     212:	90 87       	std	Z+8, r25	; 0x08
			rx_frames[pos].data[6] = CANMSG;
     214:	9c 91       	ld	r25, X
     216:	91 87       	std	Z+9, r25	; 0x09
			rx_frames[pos].data[7] = CANMSG;
     218:	9c 91       	ld	r25, X
     21a:	92 87       	std	Z+10, r25	; 0x0a
			rx_on++;
     21c:	8f 5f       	subi	r24, 0xFF	; 255
     21e:	80 93 99 02 	sts	0x0299, r24

			//reset if reset can message
			if(rx_frames[pos].id == 0x000 && rx_frames[pos].data[0] == 0x03){
     222:	40 81       	ld	r20, Z
     224:	42 95       	swap	r20
     226:	46 95       	lsr	r20
     228:	47 70       	andi	r20, 0x07	; 7
     22a:	51 81       	ldd	r21, Z+1	; 0x01
     22c:	65 2f       	mov	r22, r21
     22e:	66 0f       	add	r22, r22
     230:	66 0f       	add	r22, r22
     232:	66 0f       	add	r22, r22
     234:	86 2f       	mov	r24, r22
     236:	84 2b       	or	r24, r20
     238:	95 2f       	mov	r25, r21
     23a:	92 95       	swap	r25
     23c:	96 95       	lsr	r25
     23e:	97 70       	andi	r25, 0x07	; 7
     240:	89 2b       	or	r24, r25
     242:	b1 f4       	brne	.+44     	; 0x270 <__vector_18+0x19e>
     244:	8b e0       	ldi	r24, 0x0B	; 11
     246:	82 9f       	mul	r24, r18
     248:	f0 01       	movw	r30, r0
     24a:	83 9f       	mul	r24, r19
     24c:	f0 0d       	add	r31, r0
     24e:	11 24       	eor	r1, r1
     250:	e2 56       	subi	r30, 0x62	; 98
     252:	fd 4f       	sbci	r31, 0xFD	; 253
     254:	83 81       	ldd	r24, Z+3	; 0x03
     256:	83 30       	cpi	r24, 0x03	; 3
     258:	59 f4       	brne	.+22     	; 0x270 <__vector_18+0x19e>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     25a:	98 e0       	ldi	r25, 0x08	; 8
     25c:	88 e1       	ldi	r24, 0x18	; 24
     25e:	0f b6       	in	r0, 0x3f	; 63
     260:	f8 94       	cli
     262:	a8 95       	wdr
     264:	80 93 60 00 	sts	0x0060, r24
     268:	0f be       	out	0x3f, r0	; 63
     26a:	90 93 60 00 	sts	0x0060, r25
				wdt_enable(WDTO_15MS);
				while(1); //wait for watchdog
     26e:	ff cf       	rjmp	.-2      	; 0x26e <__vector_18+0x19c>
			}


		}
		//clear irq
		canstmod = CANSTMOB;
     270:	ee ee       	ldi	r30, 0xEE	; 238
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	80 81       	ld	r24, Z
     276:	89 83       	std	Y+1, r24	; 0x01
		(void)canstmod;
     278:	89 81       	ldd	r24, Y+1	; 0x01
		CANSTMOB&= ~_BV(RXOK);
     27a:	80 81       	ld	r24, Z
     27c:	8f 7d       	andi	r24, 0xDF	; 223
     27e:	80 83       	st	Z, r24
		CANCDMOB = _BV(CONMOB1) | CAN_IDE;			//Set Mob 1 as RX and IDE
     280:	80 e8       	ldi	r24, 0x80	; 128
     282:	80 93 ef 00 	sts	0x00EF, r24

	}
}
     286:	0f 90       	pop	r0
     288:	df 91       	pop	r29
     28a:	cf 91       	pop	r28
     28c:	ff 91       	pop	r31
     28e:	ef 91       	pop	r30
     290:	bf 91       	pop	r27
     292:	af 91       	pop	r26
     294:	9f 91       	pop	r25
     296:	8f 91       	pop	r24
     298:	6f 91       	pop	r22
     29a:	5f 91       	pop	r21
     29c:	4f 91       	pop	r20
     29e:	3f 91       	pop	r19
     2a0:	2f 91       	pop	r18
     2a2:	0f 90       	pop	r0
     2a4:	0f be       	out	0x3f, r0	; 63
     2a6:	0f 90       	pop	r0
     2a8:	1f 90       	pop	r1
     2aa:	18 95       	reti

000002ac <can_init>:


void can_init(void) {
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
	// Reset CAN controller
	CANGCON = (1 << SWRES);
     2b0:	e8 ed       	ldi	r30, 0xD8	; 216
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	80 83       	st	Z, r24

	CANBT1 = (BRP_VALUE - 1) << 1;
     2b8:	10 92 e2 00 	sts	0x00E2, r1
	CANBT2 = ((SJW_VALUE - 1) << 5) | ((PROP_SEG - 1) << 1);
     2bc:	8c e0       	ldi	r24, 0x0C	; 12
     2be:	80 93 e3 00 	sts	0x00E3, r24
	CANBT3 = ((PHASE_SEG_2 - 1) << 4) | ((PHASE_SEG_1 - 1) << 1) | 1;
     2c2:	87 e3       	ldi	r24, 0x37	; 55
     2c4:	80 93 e4 00 	sts	0x00E4, r24

	CANTIM = 0;
     2c8:	10 92 e7 00 	sts	0x00E7, r1
     2cc:	10 92 e6 00 	sts	0x00E6, r1
	CANTTC = 0;
     2d0:	10 92 e9 00 	sts	0x00E9, r1
     2d4:	10 92 e8 00 	sts	0x00E8, r1

	CANHPMOB = 0;
     2d8:	10 92 ec 00 	sts	0x00EC, r1
	CANTCON = 0;
     2dc:	10 92 e5 00 	sts	0x00E5, r1

	// Switch to Mob 0 access
	CANPAGE = 0 << 4;
     2e0:	cd ee       	ldi	r28, 0xED	; 237
     2e2:	d0 e0       	ldi	r29, 0x00	; 0
     2e4:	18 82       	st	Y, r1
	CANSTMOB = 0;
     2e6:	ae ee       	ldi	r26, 0xEE	; 238
     2e8:	b0 e0       	ldi	r27, 0x00	; 0
     2ea:	1c 92       	st	X, r1
	// Switch to Mob 1 access
	CANPAGE = 1 << 4;
     2ec:	80 e1       	ldi	r24, 0x10	; 16
     2ee:	88 83       	st	Y, r24
	CANSTMOB = 0;
     2f0:	1c 92       	st	X, r1
	CANIDM4 = ACCPT_MASK_RTR << 2 | ACCPT_MASK_IDE;
     2f2:	10 92 f4 00 	sts	0x00F4, r1
	CANIDM2 = (ACCPT_MASK_ID << 5) & 0xFF;
     2f6:	10 92 f6 00 	sts	0x00F6, r1
	CANIDM1 = (ACCPT_MASK_ID >> 3) & 0xFF;
     2fa:	10 92 f7 00 	sts	0x00F7, r1
	CANIDT4 = ACCPT_TAG_RTR << 2 | ACCPT_TAG_RB0;
     2fe:	10 92 f0 00 	sts	0x00F0, r1
	CANIDT2 = (ACCPT_TAG_ID << 5) & 0xFF;
     302:	10 92 f2 00 	sts	0x00F2, r1
	CANIDT1 = (ACCPT_TAG_ID >> 3) & 0xFF;
     306:	10 92 f3 00 	sts	0x00F3, r1

	// Set Mob 1 as RX and IDE
	CANCDMOB = (1 << CONMOB1) | CAN_IDE;
     30a:	80 e8       	ldi	r24, 0x80	; 128
     30c:	80 93 ef 00 	sts	0x00EF, r24
	// Enable Mob 0 and 1
	CANEN2 = (1 << ENMOB1) | (1 << ENMOB0);
     310:	83 e0       	ldi	r24, 0x03	; 3
     312:	80 93 dc 00 	sts	0x00DC, r24
	// Enable Mob 0 and 1 Interrupt
	CANIE2 = (1 << ENMOB1) | (1 << ENMOB0);
     316:	80 93 de 00 	sts	0x00DE, r24
	// Enable TX and RX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);	
     31a:	80 eb       	ldi	r24, 0xB0	; 176
     31c:	80 93 db 00 	sts	0x00DB, r24

	// Enable CAN controller
	CANGCON = (1 << ENASTB);
     320:	82 e0       	ldi	r24, 0x02	; 2
     322:	80 83       	st	Z, r24

	reset = 0;
     324:	10 92 98 02 	sts	0x0298, r1
}
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	08 95       	ret

0000032e <can_read_message>:

bool can_read_message(CanMessage_t* message) {
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	ec 01       	movw	r28, r24
	// Check if there is a new message
	if (rx_on == rx_off) {
     334:	40 91 9a 02 	lds	r20, 0x029A
     338:	20 91 99 02 	lds	r18, 0x0299
     33c:	24 17       	cp	r18, r20
     33e:	89 f1       	breq	.+98     	; 0x3a2 <can_read_message+0x74>
		return false;
	}

	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];
     340:	a4 2f       	mov	r26, r20
     342:	a7 70       	andi	r26, 0x07	; 7

	message->id = frame->id;
     344:	8b e0       	ldi	r24, 0x0B	; 11
     346:	a8 9f       	mul	r26, r24
     348:	b0 01       	movw	r22, r0
     34a:	11 24       	eor	r1, r1
     34c:	fb 01       	movw	r30, r22
     34e:	e2 56       	subi	r30, 0x62	; 98
     350:	fd 4f       	sbci	r31, 0xFD	; 253
     352:	20 81       	ld	r18, Z
     354:	22 95       	swap	r18
     356:	26 95       	lsr	r18
     358:	27 70       	andi	r18, 0x07	; 7
     35a:	31 81       	ldd	r19, Z+1	; 0x01
     35c:	53 2f       	mov	r21, r19
     35e:	55 0f       	add	r21, r21
     360:	55 0f       	add	r21, r21
     362:	55 0f       	add	r21, r21
     364:	25 2b       	or	r18, r21
     366:	32 95       	swap	r19
     368:	36 95       	lsr	r19
     36a:	37 70       	andi	r19, 0x07	; 7
     36c:	28 83       	st	Y, r18
     36e:	39 83       	std	Y+1, r19	; 0x01
	message->length = frame->length;
     370:	fb 01       	movw	r30, r22
     372:	e0 56       	subi	r30, 0x60	; 96
     374:	fd 4f       	sbci	r31, 0xFD	; 253
     376:	20 81       	ld	r18, Z
     378:	2f 70       	andi	r18, 0x0F	; 15
     37a:	2a 83       	std	Y+2, r18	; 0x02
	for (int i = 0; i < message->length; i++) {
     37c:	22 23       	and	r18, r18
     37e:	99 f0       	breq	.+38     	; 0x3a6 <can_read_message+0x78>
     380:	db 01       	movw	r26, r22
     382:	af 55       	subi	r26, 0x5F	; 95
     384:	bd 4f       	sbci	r27, 0xFD	; 253
     386:	fe 01       	movw	r30, r28
     388:	33 96       	adiw	r30, 0x03	; 3
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	2d 5f       	subi	r18, 0xFD	; 253
     38e:	3f 4f       	sbci	r19, 0xFF	; 255
     390:	ce 01       	movw	r24, r28
     392:	82 0f       	add	r24, r18
     394:	93 1f       	adc	r25, r19
		message->data[i] = frame->data[i];
     396:	2d 91       	ld	r18, X+
     398:	21 93       	st	Z+, r18
	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
	message->length = frame->length;
	for (int i = 0; i < message->length; i++) {
     39a:	e8 17       	cp	r30, r24
     39c:	f9 07       	cpc	r31, r25
     39e:	d9 f7       	brne	.-10     	; 0x396 <can_read_message+0x68>
     3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <can_read_message+0x78>
}

bool can_read_message(CanMessage_t* message) {
	// Check if there is a new message
	if (rx_on == rx_off) {
		return false;
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	04 c0       	rjmp	.+8      	; 0x3ae <can_read_message+0x80>
		message->data[i] = frame->data[i];
	}

	// Advance to next can message
	if (rx_on != rx_off) {
		rx_off++;
     3a6:	4f 5f       	subi	r20, 0xFF	; 255
     3a8:	40 93 9a 02 	sts	0x029A, r20
	}

	return true;
     3ac:	81 e0       	ldi	r24, 0x01	; 1
}
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	08 95       	ret

000003b4 <can_send_message>:

bool can_send_message(CanMessage_t* message) {
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	dc 01       	movw	r26, r24
	uint8_t result;

	result = 0;
	CANGIE &= ~(1 << ENIT);
     3ba:	eb ed       	ldi	r30, 0xDB	; 219
     3bc:	f0 e0       	ldi	r31, 0x00	; 0
     3be:	80 81       	ld	r24, Z
     3c0:	8f 77       	andi	r24, 0x7F	; 127
     3c2:	80 83       	st	Z, r24

	if (!tx_busy) {
     3c4:	80 91 9b 02 	lds	r24, 0x029B
     3c8:	81 11       	cpse	r24, r1
     3ca:	29 c0       	rjmp	.+82     	; 0x41e <can_send_message+0x6a>
		// Switch to Mob 0 access
		CANPAGE = 0 << 4;
     3cc:	10 92 ed 00 	sts	0x00ED, r1

		// Set ID
		CANIDT2 = message->id << 5;
     3d0:	8c 91       	ld	r24, X
     3d2:	82 95       	swap	r24
     3d4:	88 0f       	add	r24, r24
     3d6:	80 7e       	andi	r24, 0xE0	; 224
     3d8:	80 93 f2 00 	sts	0x00F2, r24
		CANIDT1 = message->id >> 3;
     3dc:	8d 91       	ld	r24, X+
     3de:	9c 91       	ld	r25, X
     3e0:	11 97       	sbiw	r26, 0x01	; 1
     3e2:	96 95       	lsr	r25
     3e4:	87 95       	ror	r24
     3e6:	96 95       	lsr	r25
     3e8:	87 95       	ror	r24
     3ea:	96 95       	lsr	r25
     3ec:	87 95       	ror	r24
     3ee:	80 93 f3 00 	sts	0x00F3, r24
     3f2:	fd 01       	movw	r30, r26
     3f4:	33 96       	adiw	r30, 0x03	; 3
     3f6:	9d 01       	movw	r18, r26
     3f8:	25 5f       	subi	r18, 0xF5	; 245
     3fa:	3f 4f       	sbci	r19, 0xFF	; 255

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data[i];
     3fc:	ca ef       	ldi	r28, 0xFA	; 250
     3fe:	d0 e0       	ldi	r29, 0x00	; 0
     400:	81 91       	ld	r24, Z+
     402:	88 83       	st	Y, r24
		// Set ID
		CANIDT2 = message->id << 5;
		CANIDT1 = message->id >> 3;

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
     404:	e2 17       	cp	r30, r18
     406:	f3 07       	cpc	r31, r19
     408:	d9 f7       	brne	.-10     	; 0x400 <can_send_message+0x4c>
			CANMSG = message->data[i];
		}
		
		result = 1;
		tx_busy = 1;
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	80 93 9b 02 	sts	0x029B, r24

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | CAN_IDE | message->length;
     410:	12 96       	adiw	r26, 0x02	; 2
     412:	8c 91       	ld	r24, X
     414:	80 64       	ori	r24, 0x40	; 64
     416:	80 93 ef 00 	sts	0x00EF, r24
		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data[i];
		}
		
		result = 1;
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	49 c0       	rjmp	.+146    	; 0x4b0 <can_send_message+0xfc>
		tx_busy = 1;

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | CAN_IDE | message->length;
	}
	else if (TX_SIZE - ((tx_on - tx_off) & TX_ABS_MASK)) {
     41e:	20 91 9c 02 	lds	r18, 0x029C
     422:	82 2f       	mov	r24, r18
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	30 91 9d 02 	lds	r19, 0x029D
     42a:	83 1b       	sub	r24, r19
     42c:	91 09       	sbc	r25, r1
     42e:	8f 77       	andi	r24, 0x7F	; 127
     430:	99 27       	eor	r25, r25
     432:	08 97       	sbiw	r24, 0x08	; 8
     434:	e1 f1       	breq	.+120    	; 0x4ae <can_send_message+0xfa>
		result = 1;

		tx_frames[tx_on & (TX_SIZE-1)].id = message->id;
     436:	c2 2f       	mov	r28, r18
     438:	c7 70       	andi	r28, 0x07	; 7
     43a:	8b e0       	ldi	r24, 0x0B	; 11
     43c:	c8 9f       	mul	r28, r24
     43e:	e0 01       	movw	r28, r0
     440:	11 24       	eor	r1, r1
     442:	fe 01       	movw	r30, r28
     444:	ea 50       	subi	r30, 0x0A	; 10
     446:	fd 4f       	sbci	r31, 0xFD	; 253
     448:	8c 91       	ld	r24, X
     44a:	98 2f       	mov	r25, r24
     44c:	92 95       	swap	r25
     44e:	99 0f       	add	r25, r25
     450:	90 7e       	andi	r25, 0xE0	; 224
     452:	80 81       	ld	r24, Z
     454:	8f 71       	andi	r24, 0x1F	; 31
     456:	89 2b       	or	r24, r25
     458:	80 83       	st	Z, r24
     45a:	8c 91       	ld	r24, X
     45c:	98 2f       	mov	r25, r24
     45e:	96 95       	lsr	r25
     460:	96 95       	lsr	r25
     462:	96 95       	lsr	r25
     464:	81 81       	ldd	r24, Z+1	; 0x01
     466:	80 7e       	andi	r24, 0xE0	; 224
     468:	89 2b       	or	r24, r25
     46a:	81 83       	std	Z+1, r24	; 0x01
     46c:	11 96       	adiw	r26, 0x01	; 1
     46e:	9c 91       	ld	r25, X
     470:	11 97       	sbiw	r26, 0x01	; 1
     472:	92 95       	swap	r25
     474:	99 0f       	add	r25, r25
     476:	90 7e       	andi	r25, 0xE0	; 224
     478:	8f 71       	andi	r24, 0x1F	; 31
     47a:	89 2b       	or	r24, r25
     47c:	81 83       	std	Z+1, r24	; 0x01
		tx_frames[tx_on & (TX_SIZE-1)].length = message->length;
     47e:	12 96       	adiw	r26, 0x02	; 2
     480:	8c 91       	ld	r24, X
     482:	12 97       	sbiw	r26, 0x02	; 2
     484:	98 2f       	mov	r25, r24
     486:	9f 70       	andi	r25, 0x0F	; 15
     488:	82 81       	ldd	r24, Z+2	; 0x02
     48a:	80 7f       	andi	r24, 0xF0	; 240
     48c:	89 2b       	or	r24, r25
     48e:	82 83       	std	Z+2, r24	; 0x02
     490:	fd 01       	movw	r30, r26
     492:	33 96       	adiw	r30, 0x03	; 3
     494:	c7 50       	subi	r28, 0x07	; 7
     496:	dd 4f       	sbci	r29, 0xFD	; 253
     498:	1b 96       	adiw	r26, 0x0b	; 11
		
		for (int i = 0; i < 8; i++) {
			tx_frames[tx_on & (TX_SIZE-1)].data[i] = message->data[i];
     49a:	81 91       	ld	r24, Z+
     49c:	89 93       	st	Y+, r24
		result = 1;

		tx_frames[tx_on & (TX_SIZE-1)].id = message->id;
		tx_frames[tx_on & (TX_SIZE-1)].length = message->length;
		
		for (int i = 0; i < 8; i++) {
     49e:	ea 17       	cp	r30, r26
     4a0:	fb 07       	cpc	r31, r27
     4a2:	d9 f7       	brne	.-10     	; 0x49a <can_send_message+0xe6>
			tx_frames[tx_on & (TX_SIZE-1)].data[i] = message->data[i];
		}

		tx_on++;
     4a4:	2f 5f       	subi	r18, 0xFF	; 255
     4a6:	20 93 9c 02 	sts	0x029C, r18
		result = 1;
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	01 c0       	rjmp	.+2      	; 0x4b0 <can_send_message+0xfc>
}

bool can_send_message(CanMessage_t* message) {
	uint8_t result;

	result = 0;
     4ae:	90 e0       	ldi	r25, 0x00	; 0

		tx_on++;
		result = 1;
	}

	CANGIE |= (1 << ENIT);
     4b0:	eb ed       	ldi	r30, 0xDB	; 219
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
     4b4:	80 81       	ld	r24, Z
     4b6:	80 68       	ori	r24, 0x80	; 128
     4b8:	80 83       	st	Z, r24
	return result;
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	91 11       	cpse	r25, r1
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <can_send_message+0x10e>
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	08 95       	ret

000004c8 <usbdbg_tx_char>:
	fdevopen(usbdbg_tx_char, NULL);
}

int usbdbg_tx_char(char c, FILE* stream)
{
	while (!(UCSR0A & (1 << UDRE0))) { }; // Wait until data register is empty
     4c8:	e0 ec       	ldi	r30, 0xC0	; 192
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	90 81       	ld	r25, Z
     4ce:	95 ff       	sbrs	r25, 5
     4d0:	fd cf       	rjmp	.-6      	; 0x4cc <usbdbg_tx_char+0x4>
	UDR0 = c;
     4d2:	80 93 c6 00 	sts	0x00C6, r24
	return 1;
}
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	08 95       	ret

000004dc <usbdbg_init>:
#include <stdlib.h>

void usbdbg_init()
{
	const uint32_t baud_rate = 500000;
	UBRR0 = (F_CPU / 16) / baud_rate - 1;
     4dc:	10 92 c5 00 	sts	0x00C5, r1
     4e0:	10 92 c4 00 	sts	0x00C4, r1
	UCSR0C = (3 << UCSZ0);	// 8 bit transfer
     4e4:	86 e0       	ldi	r24, 0x06	; 6
     4e6:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B |= (1 << TXEN0)|(1<<RXEN0); // Enable receive and transmit
     4ea:	e1 ec       	ldi	r30, 0xC1	; 193
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	80 81       	ld	r24, Z
     4f0:	88 61       	ori	r24, 0x18	; 24
     4f2:	80 83       	st	Z, r24
	
	fdevopen(usbdbg_tx_char, NULL);
     4f4:	60 e0       	ldi	r22, 0x00	; 0
     4f6:	70 e0       	ldi	r23, 0x00	; 0
     4f8:	84 e6       	ldi	r24, 0x64	; 100
     4fa:	92 e0       	ldi	r25, 0x02	; 2
     4fc:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <fdevopen>
     500:	08 95       	ret

00000502 <usbdbg_rx_char>:
	return 1;
}

char usbdbg_rx_char()
{
	return UDR0;
     502:	80 91 c6 00 	lds	r24, 0x00C6
} 
     506:	08 95       	ret

00000508 <__vector_21>:
			newUartMessage = 0;
		}
	}
}

ISR(USART0_RX_vect){
     508:	1f 92       	push	r1
     50a:	0f 92       	push	r0
     50c:	0f b6       	in	r0, 0x3f	; 63
     50e:	0f 92       	push	r0
     510:	11 24       	eor	r1, r1
     512:	2f 93       	push	r18
     514:	3f 93       	push	r19
     516:	4f 93       	push	r20
     518:	5f 93       	push	r21
     51a:	6f 93       	push	r22
     51c:	7f 93       	push	r23
     51e:	8f 93       	push	r24
     520:	9f 93       	push	r25
     522:	af 93       	push	r26
     524:	bf 93       	push	r27
     526:	ef 93       	push	r30
     528:	ff 93       	push	r31
	char rxChar = usbdbg_rx_char();
     52a:	0e 94 81 02 	call	0x502	; 0x502 <usbdbg_rx_char>
     52e:	48 2f       	mov	r20, r24
	uartRxBuffer[rxIndex] = rxChar;
     530:	20 91 52 03 	lds	r18, 0x0352
     534:	30 91 53 03 	lds	r19, 0x0353
     538:	f9 01       	movw	r30, r18
     53a:	e1 5a       	subi	r30, 0xA1	; 161
     53c:	fc 4f       	sbci	r31, 0xFC	; 252
     53e:	80 83       	st	Z, r24
	
	rxIndex = (rxIndex+1)%RX_BUFFER_SIZE;
     540:	c9 01       	movw	r24, r18
     542:	01 96       	adiw	r24, 0x01	; 1
     544:	68 ec       	ldi	r22, 0xC8	; 200
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	0e 94 c9 05 	call	0xb92	; 0xb92 <__divmodhi4>
     54c:	90 93 53 03 	sts	0x0353, r25
     550:	80 93 52 03 	sts	0x0352, r24
	
	if (rxChar == '\n')
     554:	4a 30       	cpi	r20, 0x0A	; 10
     556:	31 f4       	brne	.+12     	; 0x564 <__vector_21+0x5c>
	{	
		newUartMessage = 1;
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	90 93 4f 03 	sts	0x034F, r25
     560:	80 93 4e 03 	sts	0x034E, r24
	}
}
     564:	ff 91       	pop	r31
     566:	ef 91       	pop	r30
     568:	bf 91       	pop	r27
     56a:	af 91       	pop	r26
     56c:	9f 91       	pop	r25
     56e:	8f 91       	pop	r24
     570:	7f 91       	pop	r23
     572:	6f 91       	pop	r22
     574:	5f 91       	pop	r21
     576:	4f 91       	pop	r20
     578:	3f 91       	pop	r19
     57a:	2f 91       	pop	r18
     57c:	0f 90       	pop	r0
     57e:	0f be       	out	0x3f, r0	; 63
     580:	0f 90       	pop	r0
     582:	1f 90       	pop	r1
     584:	18 95       	reti

00000586 <ascii_to_dec>:

uint8_t ascii_to_dec(char c)
{
     586:	98 2f       	mov	r25, r24
	uint8_t dec = 0;
	
	if ((c >= '0') && (c <= '9'))
     588:	80 ed       	ldi	r24, 0xD0	; 208
     58a:	89 0f       	add	r24, r25
     58c:	8a 30       	cpi	r24, 0x0A	; 10
     58e:	48 f0       	brcs	.+18     	; 0x5a2 <ascii_to_dec+0x1c>
	{
		dec = (uint8_t)(c - '0');
		
	} else if ((c >= 'A') && (c <= 'F'))
     590:	8f eb       	ldi	r24, 0xBF	; 191
     592:	89 0f       	add	r24, r25
     594:	86 30       	cpi	r24, 0x06	; 6
     596:	28 f0       	brcs	.+10     	; 0x5a2 <ascii_to_dec+0x1c>
	{
		dec = (uint8_t)(c - 'A');
		
	} else if ((c >= 'a') && (c <= 'f'))
     598:	8f e9       	ldi	r24, 0x9F	; 159
     59a:	89 0f       	add	r24, r25
     59c:	86 30       	cpi	r24, 0x06	; 6
     59e:	08 f0       	brcs	.+2      	; 0x5a2 <ascii_to_dec+0x1c>
	{
		dec = (uint8_t)(c - 'a');
		
		} else {
		dec = 0;
     5a0:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return dec;
     5a2:	08 95       	ret

000005a4 <main>:
int parseIndex = 0;
int newUartMessage = 0;

uint8_t ascii_to_dec(char c);

int main(void){
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	00 d0       	rcall	.+0      	; 0x5aa <main+0x6>
     5aa:	00 d0       	rcall	.+0      	; 0x5ac <main+0x8>
     5ac:	00 d0       	rcall	.+0      	; 0x5ae <main+0xa>
     5ae:	cd b7       	in	r28, 0x3d	; 61
     5b0:	de b7       	in	r29, 0x3e	; 62
	cli();
     5b2:	f8 94       	cli
	usbdbg_init();
     5b4:	0e 94 6e 02 	call	0x4dc	; 0x4dc <usbdbg_init>
	can_init();
     5b8:	0e 94 56 01 	call	0x2ac	; 0x2ac <can_init>
	sei();
     5bc:	78 94       	sei
	
	while (1)
	{
		if (can_read_message(&rxFrame))
     5be:	0f 2e       	mov	r0, r31
     5c0:	f4 e5       	ldi	r31, 0x54	; 84
     5c2:	8f 2e       	mov	r8, r31
     5c4:	f3 e0       	ldi	r31, 0x03	; 3
     5c6:	9f 2e       	mov	r9, r31
     5c8:	f0 2d       	mov	r31, r0
		{
			int index = 0;
			index += sprintf(uartTxBuffer, "[%03X:%d:", rxFrame.id, rxFrame.length);
     5ca:	0f 2e       	mov	r0, r31
     5cc:	f7 e2       	ldi	r31, 0x27	; 39
     5ce:	4f 2e       	mov	r4, r31
     5d0:	f4 e0       	ldi	r31, 0x04	; 4
     5d2:	5f 2e       	mov	r5, r31
     5d4:	f0 2d       	mov	r31, r0
			 for(int i = 0; i < rxFrame.length; i++)
			 {
				 index += sprintf(&uartTxBuffer[index], "%02X", rxFrame.data[i]);
			 }
			 
			 sprintf(&uartTxBuffer[index], "]\n");
     5d6:	0f 2e       	mov	r0, r31
     5d8:	fd e5       	ldi	r31, 0x5D	; 93
     5da:	af 2e       	mov	r10, r31
     5dc:	fa e0       	ldi	r31, 0x0A	; 10
     5de:	bf 2e       	mov	r11, r31
     5e0:	c1 2c       	mov	r12, r1
     5e2:	f0 2d       	mov	r31, r0
			int index = 0;
			index += sprintf(uartTxBuffer, "[%03X:%d:", rxFrame.id, rxFrame.length);
			
			 for(int i = 0; i < rxFrame.length; i++)
			 {
				 index += sprintf(&uartTxBuffer[index], "%02X", rxFrame.data[i]);
     5e4:	0f 2e       	mov	r0, r31
     5e6:	f0 e1       	ldi	r31, 0x10	; 16
     5e8:	2f 2e       	mov	r2, r31
     5ea:	f1 e0       	ldi	r31, 0x01	; 1
     5ec:	3f 2e       	mov	r3, r31
     5ee:	f0 2d       	mov	r31, r0
		if (can_read_message(&rxFrame))
		{
			int index = 0;
			index += sprintf(uartTxBuffer, "[%03X:%d:", rxFrame.id, rxFrame.length);
			
			 for(int i = 0; i < rxFrame.length; i++)
     5f0:	8c 82       	std	Y+4, r8	; 0x04
     5f2:	99 82       	std	Y+1, r9	; 0x01
     5f4:	61 2c       	mov	r6, r1
     5f6:	71 2c       	mov	r7, r1
     5f8:	dc 80       	ldd	r13, Y+4	; 0x04
	can_init();
	sei();
	
	while (1)
	{
		if (can_read_message(&rxFrame))
     5fa:	8d 2d       	mov	r24, r13
     5fc:	99 81       	ldd	r25, Y+1	; 0x01
     5fe:	0e 94 97 01 	call	0x32e	; 0x32e <can_read_message>
     602:	88 23       	and	r24, r24
     604:	09 f4       	brne	.+2      	; 0x608 <main+0x64>
     606:	5f c0       	rjmp	.+190    	; 0x6c6 <main+0x122>
		{
			int index = 0;
			index += sprintf(uartTxBuffer, "[%03X:%d:", rxFrame.id, rxFrame.length);
     608:	d4 01       	movw	r26, r8
     60a:	12 96       	adiw	r26, 0x02	; 2
     60c:	8c 91       	ld	r24, X
     60e:	12 97       	sbiw	r26, 0x02	; 2
     610:	1f 92       	push	r1
     612:	8f 93       	push	r24
     614:	11 96       	adiw	r26, 0x01	; 1
     616:	8c 91       	ld	r24, X
     618:	11 97       	sbiw	r26, 0x01	; 1
     61a:	8f 93       	push	r24
     61c:	8c 91       	ld	r24, X
     61e:	8f 93       	push	r24
     620:	a6 e0       	ldi	r26, 0x06	; 6
     622:	b1 e0       	ldi	r27, 0x01	; 1
     624:	bf 93       	push	r27
     626:	af 93       	push	r26
     628:	5f 92       	push	r5
     62a:	4f 92       	push	r4
     62c:	0e 94 52 06 	call	0xca4	; 0xca4 <sprintf>
     630:	9b 83       	std	Y+3, r25	; 0x03
     632:	8a 83       	std	Y+2, r24	; 0x02
			
			 for(int i = 0; i < rxFrame.length; i++)
     634:	d4 01       	movw	r26, r8
     636:	12 96       	adiw	r26, 0x02	; 2
     638:	8c 91       	ld	r24, X
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	f8 94       	cli
     63e:	de bf       	out	0x3e, r29	; 62
     640:	0f be       	out	0x3f, r0	; 63
     642:	cd bf       	out	0x3d, r28	; 61
     644:	88 23       	and	r24, r24
     646:	61 f1       	breq	.+88     	; 0x6a0 <main+0xfc>
     648:	0f 2e       	mov	r0, r31
     64a:	f7 e5       	ldi	r31, 0x57	; 87
     64c:	ef 2e       	mov	r14, r31
     64e:	f3 e0       	ldi	r31, 0x03	; 3
     650:	ff 2e       	mov	r15, r31
     652:	f0 2d       	mov	r31, r0
     654:	06 2d       	mov	r16, r6
     656:	17 2d       	mov	r17, r7
			 {
				 index += sprintf(&uartTxBuffer[index], "%02X", rxFrame.data[i]);
     658:	d7 01       	movw	r26, r14
     65a:	8d 91       	ld	r24, X+
     65c:	7d 01       	movw	r14, r26
     65e:	1f 92       	push	r1
     660:	8f 93       	push	r24
     662:	3f 92       	push	r3
     664:	2f 92       	push	r2
     666:	2a 81       	ldd	r18, Y+2	; 0x02
     668:	3b 81       	ldd	r19, Y+3	; 0x03
     66a:	29 5d       	subi	r18, 0xD9	; 217
     66c:	3b 4f       	sbci	r19, 0xFB	; 251
     66e:	3f 93       	push	r19
     670:	2f 93       	push	r18
     672:	0e 94 52 06 	call	0xca4	; 0xca4 <sprintf>
     676:	ea 81       	ldd	r30, Y+2	; 0x02
     678:	fb 81       	ldd	r31, Y+3	; 0x03
     67a:	e8 0f       	add	r30, r24
     67c:	f9 1f       	adc	r31, r25
     67e:	fb 83       	std	Y+3, r31	; 0x03
     680:	ea 83       	std	Y+2, r30	; 0x02
		if (can_read_message(&rxFrame))
		{
			int index = 0;
			index += sprintf(uartTxBuffer, "[%03X:%d:", rxFrame.id, rxFrame.length);
			
			 for(int i = 0; i < rxFrame.length; i++)
     682:	0f 5f       	subi	r16, 0xFF	; 255
     684:	1f 4f       	sbci	r17, 0xFF	; 255
     686:	d4 01       	movw	r26, r8
     688:	12 96       	adiw	r26, 0x02	; 2
     68a:	2c 91       	ld	r18, X
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	0f 90       	pop	r0
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
     698:	0f 90       	pop	r0
     69a:	02 17       	cp	r16, r18
     69c:	13 07       	cpc	r17, r19
     69e:	e4 f2       	brlt	.-72     	; 0x658 <main+0xb4>
			 {
				 index += sprintf(&uartTxBuffer[index], "%02X", rxFrame.data[i]);
			 }
			 
			 sprintf(&uartTxBuffer[index], "]\n");
     6a0:	ea 81       	ldd	r30, Y+2	; 0x02
     6a2:	fb 81       	ldd	r31, Y+3	; 0x03
     6a4:	e9 5d       	subi	r30, 0xD9	; 217
     6a6:	fb 4f       	sbci	r31, 0xFB	; 251
     6a8:	a0 82       	st	Z, r10
     6aa:	b1 82       	std	Z+1, r11	; 0x01
     6ac:	c2 82       	std	Z+2, r12	; 0x02
			 
			 printf("%s", uartTxBuffer);
     6ae:	5f 92       	push	r5
     6b0:	4f 92       	push	r4
     6b2:	a5 e1       	ldi	r26, 0x15	; 21
     6b4:	b1 e0       	ldi	r27, 0x01	; 1
     6b6:	bf 93       	push	r27
     6b8:	af 93       	push	r26
     6ba:	0e 94 3c 06 	call	0xc78	; 0xc78 <printf>
     6be:	0f 90       	pop	r0
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	0f 90       	pop	r0
		}
		
		if (newUartMessage)
     6c6:	80 91 4e 03 	lds	r24, 0x034E
     6ca:	90 91 4f 03 	lds	r25, 0x034F
     6ce:	89 2b       	or	r24, r25
     6d0:	09 f4       	brne	.+2      	; 0x6d4 <main+0x130>
     6d2:	93 cf       	rjmp	.-218    	; 0x5fa <main+0x56>
			uint16_t canId = 0;
			uint8_t errorIncrement = 0;
			uint8_t canData = 0;
			
			//Looking for [ and skips it if we find it, error otherwise
			while(uartRxBuffer[parseIndex] != '[')
     6d4:	80 91 50 03 	lds	r24, 0x0350
     6d8:	90 91 51 03 	lds	r25, 0x0351
     6dc:	fc 01       	movw	r30, r24
     6de:	e1 5a       	subi	r30, 0xA1	; 161
     6e0:	fc 4f       	sbci	r31, 0xFC	; 252
     6e2:	20 81       	ld	r18, Z
     6e4:	2b 35       	cpi	r18, 0x5B	; 91
     6e6:	09 f4       	brne	.+2      	; 0x6ea <main+0x146>
     6e8:	0a c2       	rjmp	.+1044   	; 0xafe <__stack+0x1ff>
			{
				parseIndex = (parseIndex+1)%RX_BUFFER_SIZE;
     6ea:	01 96       	adiw	r24, 0x01	; 1
     6ec:	68 ec       	ldi	r22, 0xC8	; 200
     6ee:	70 e0       	ldi	r23, 0x00	; 0
     6f0:	0e 94 c9 05 	call	0xb92	; 0xb92 <__divmodhi4>
     6f4:	90 93 51 03 	sts	0x0351, r25
     6f8:	80 93 50 03 	sts	0x0350, r24
     6fc:	e1 2c       	mov	r14, r1
     6fe:	f1 2c       	mov	r15, r1
     700:	08 ec       	ldi	r16, 0xC8	; 200
     702:	10 e0       	ldi	r17, 0x00	; 0
				{
					printf("ERROR, Could not find CANmessage in uartRxBuffer");
					break;
				} else if (errorIncrement > 1)
				{
					printf("ERROR, Looking for [, increment: %u", errorIncrement-1);
     704:	0f 2e       	mov	r0, r31
     706:	f9 e4       	ldi	r31, 0x49	; 73
     708:	6f 2e       	mov	r6, r31
     70a:	f1 e0       	ldi	r31, 0x01	; 1
     70c:	7f 2e       	mov	r7, r31
     70e:	f0 2d       	mov	r31, r0
     710:	26 c0       	rjmp	.+76     	; 0x75e <main+0x1ba>
			uint8_t canData = 0;
			
			//Looking for [ and skips it if we find it, error otherwise
			while(uartRxBuffer[parseIndex] != '[')
			{
				parseIndex = (parseIndex+1)%RX_BUFFER_SIZE;
     712:	01 96       	adiw	r24, 0x01	; 1
     714:	b8 01       	movw	r22, r16
     716:	0e 94 c9 05 	call	0xb92	; 0xb92 <__divmodhi4>
     71a:	90 93 51 03 	sts	0x0351, r25
     71e:	80 93 50 03 	sts	0x0350, r24
				if (errorIncrement == RX_BUFFER_SIZE)
     722:	f7 ec       	ldi	r31, 0xC7	; 199
     724:	ef 16       	cp	r14, r31
     726:	f1 04       	cpc	r15, r1
     728:	49 f4       	brne	.+18     	; 0x73c <main+0x198>
				{
					printf("ERROR, Could not find CANmessage in uartRxBuffer");
     72a:	88 e1       	ldi	r24, 0x18	; 24
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	9f 93       	push	r25
     730:	8f 93       	push	r24
     732:	0e 94 3c 06 	call	0xc78	; 0xc78 <printf>
					break;
     736:	0f 90       	pop	r0
     738:	0f 90       	pop	r0
     73a:	e1 c1       	rjmp	.+962    	; 0xafe <__stack+0x1ff>
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	8e 0d       	add	r24, r14
				} else if (errorIncrement > 1)
     740:	82 30       	cpi	r24, 0x02	; 2
     742:	50 f0       	brcs	.+20     	; 0x758 <main+0x1b4>
				{
					printf("ERROR, Looking for [, increment: %u", errorIncrement-1);
     744:	ff 92       	push	r15
     746:	ef 92       	push	r14
     748:	7f 92       	push	r7
     74a:	6f 92       	push	r6
     74c:	0e 94 3c 06 	call	0xc78	; 0xc78 <printf>
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	0f 90       	pop	r0
     756:	0f 90       	pop	r0
     758:	2f ef       	ldi	r18, 0xFF	; 255
     75a:	e2 1a       	sub	r14, r18
     75c:	f2 0a       	sbc	r15, r18
			uint16_t canId = 0;
			uint8_t errorIncrement = 0;
			uint8_t canData = 0;
			
			//Looking for [ and skips it if we find it, error otherwise
			while(uartRxBuffer[parseIndex] != '[')
     75e:	80 91 50 03 	lds	r24, 0x0350
     762:	90 91 51 03 	lds	r25, 0x0351
     766:	fc 01       	movw	r30, r24
     768:	e1 5a       	subi	r30, 0xA1	; 161
     76a:	fc 4f       	sbci	r31, 0xFC	; 252
     76c:	20 81       	ld	r18, Z
     76e:	2b 35       	cpi	r18, 0x5B	; 91
     770:	81 f6       	brne	.-96     	; 0x712 <main+0x16e>
     772:	c5 c1       	rjmp	.+906    	; 0xafe <__stack+0x1ff>
			errorIncrement = 0;
			
			// Setting CAN-ID
			for (int i = CAN_MESSAGE_ID_LENGTH-1; i >= 0; i--)
			{
				canId += (ascii_to_dec(uartRxBuffer[parseIndex]) << 4*i);
     774:	ea 81       	ldd	r30, Y+2	; 0x02
     776:	fb 81       	ldd	r31, Y+3	; 0x03
     778:	e1 5a       	subi	r30, 0xA1	; 161
     77a:	fc 4f       	sbci	r31, 0xFC	; 252
     77c:	80 81       	ld	r24, Z
     77e:	0e 94 c3 02 	call	0x586	; 0x586 <ascii_to_dec>
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e 2c       	mov	r0, r14
     786:	02 c0       	rjmp	.+4      	; 0x78c <main+0x1e8>
     788:	88 0f       	add	r24, r24
     78a:	99 1f       	adc	r25, r25
     78c:	0a 94       	dec	r0
     78e:	e2 f7       	brpl	.-8      	; 0x788 <main+0x1e4>
     790:	08 0f       	add	r16, r24
     792:	19 1f       	adc	r17, r25
				parseIndex = (parseIndex+1)%RX_BUFFER_SIZE;
     794:	8a 81       	ldd	r24, Y+2	; 0x02
     796:	9b 81       	ldd	r25, Y+3	; 0x03
     798:	01 96       	adiw	r24, 0x01	; 1
     79a:	b3 01       	movw	r22, r6
     79c:	0e 94 c9 05 	call	0xb92	; 0xb92 <__divmodhi4>
     7a0:	9b 83       	std	Y+3, r25	; 0x03
     7a2:	8a 83       	std	Y+2, r24	; 0x02
     7a4:	34 e0       	ldi	r19, 0x04	; 4
     7a6:	e3 1a       	sub	r14, r19
     7a8:	f1 08       	sbc	r15, r1
				errorIncrement++;
			}
			errorIncrement = 0;
			
			// Setting CAN-ID
			for (int i = CAN_MESSAGE_ID_LENGTH-1; i >= 0; i--)
     7aa:	8c ef       	ldi	r24, 0xFC	; 252
     7ac:	e8 16       	cp	r14, r24
     7ae:	8f ef       	ldi	r24, 0xFF	; 255
     7b0:	f8 06       	cpc	r15, r24
     7b2:	01 f7       	brne	.-64     	; 0x774 <main+0x1d0>
     7b4:	aa 81       	ldd	r26, Y+2	; 0x02
     7b6:	bb 81       	ldd	r27, Y+3	; 0x03
     7b8:	b0 93 51 03 	sts	0x0351, r27
     7bc:	a0 93 50 03 	sts	0x0350, r26
			{
				canId += (ascii_to_dec(uartRxBuffer[parseIndex]) << 4*i);
				parseIndex = (parseIndex+1)%RX_BUFFER_SIZE;
			}
			txFrame.id = canId;
     7c0:	10 93 5a 04 	sts	0x045A, r17
     7c4:	00 93 59 04 	sts	0x0459, r16
			
			//Looking for : and skips it if we find it, error otherwise
			while(uartRxBuffer[parseIndex] != ':')
     7c8:	fd 01       	movw	r30, r26
     7ca:	e1 5a       	subi	r30, 0xA1	; 161
     7cc:	fc 4f       	sbci	r31, 0xFC	; 252
     7ce:	80 81       	ld	r24, Z
     7d0:	8a 33       	cpi	r24, 0x3A	; 58
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <main+0x232>
     7d4:	45 c0       	rjmp	.+138    	; 0x860 <main+0x2bc>
			{
				parseIndex = (parseIndex+1)%RX_BUFFER_SIZE;
     7d6:	cd 01       	movw	r24, r26
     7d8:	01 96       	adiw	r24, 0x01	; 1
     7da:	68 ec       	ldi	r22, 0xC8	; 200
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	0e 94 c9 05 	call	0xb92	; 0xb92 <__divmodhi4>
     7e2:	90 93 51 03 	sts	0x0351, r25
     7e6:	80 93 50 03 	sts	0x0350, r24
     7ea:	e1 2c       	mov	r14, r1
     7ec:	f1 2c       	mov	r15, r1
     7ee:	08 ec       	ldi	r16, 0xC8	; 200
     7f0:	10 e0       	ldi	r17, 0x00	; 0
				{
					printf("ERROR, Could not find CAN length in uartRxBuffer");
					break;
				} else if (errorIncrement > 1)
				{
					printf("ERROR, Looking for :, increment: %u", errorIncrement-1);
     7f2:	0f 2e       	mov	r0, r31
     7f4:	fe e9       	ldi	r31, 0x9E	; 158
     7f6:	6f 2e       	mov	r6, r31
     7f8:	f1 e0       	ldi	r31, 0x01	; 1
     7fa:	7f 2e       	mov	r7, r31
     7fc:	f0 2d       	mov	r31, r0
     7fe:	26 c0       	rjmp	.+76     	; 0x84c <main+0x2a8>
			txFrame.id = canId;
			
			//Looking for : and skips it if we find it, error otherwise
			while(uartRxBuffer[parseIndex] != ':')
			{
				parseIndex = (parseIndex+1)%RX_BUFFER_SIZE;
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	b8 01       	movw	r22, r16
     804:	0e 94 c9 05 	call	0xb92	; 0xb92 <__divmodhi4>
     808:	90 93 51 03 	sts	0x0351, r25
     80c:	80 93 50 03 	sts	0x0350, r24
				if (errorIncrement == RX_BUFFER_SIZE)
     810:	b7 ec       	ldi	r27, 0xC7	; 199
     812:	eb 16       	cp	r14, r27
     814:	f1 04       	cpc	r15, r1
     816:	49 f4       	brne	.+18     	; 0x82a <main+0x286>
				{
					printf("ERROR, Could not find CAN length in uartRxBuffer");
     818:	8d e6       	ldi	r24, 0x6D	; 109
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	9f 93       	push	r25
     81e:	8f 93       	push	r24
     820:	0e 94 3c 06 	call	0xc78	; 0xc78 <printf>
					break;
     824:	0f 90       	pop	r0
     826:	0f 90       	pop	r0
     828:	1b c0       	rjmp	.+54     	; 0x860 <main+0x2bc>
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	8e 0d       	add	r24, r14
				} else if (errorIncrement > 1)
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	50 f0       	brcs	.+20     	; 0x846 <main+0x2a2>
				{
					printf("ERROR, Looking for :, increment: %u", errorIncrement-1);
     832:	ff 92       	push	r15
     834:	ef 92       	push	r14
     836:	7f 92       	push	r7
     838:	6f 92       	push	r6
     83a:	0e 94 3c 06 	call	0xc78	; 0xc78 <printf>
     83e:	0f 90       	pop	r0
     840:	0f 90       	pop	r0
     842:	0f 90       	pop	r0
     844:	0f 90       	pop	r0
     846:	ef ef       	ldi	r30, 0xFF	; 255
     848:	ee 1a       	sub	r14, r30
     84a:	fe 0a       	sbc	r15, r30
				parseIndex = (parseIndex+1)%RX_BUFFER_SIZE;
			}
			txFrame.id = canId;
			
			//Looking for : and skips it if we find it, error otherwise
			while(uartRxBuffer[parseIndex] != ':')
     84c:	80 91 50 03 	lds	r24, 0x0350
     850:	90 91 51 03 	lds	r25, 0x0351
     854:	fc 01       	movw	r30, r24
     856:	e1 5a       	subi	r30, 0xA1	; 161
     858:	fc 4f       	sbci	r31, 0xFC	; 252
     85a:	20 81       	ld	r18, Z
     85c:	2a 33       	cpi	r18, 0x3A	; 58
     85e:	81 f6       	brne	.-96     	; 0x800 <main+0x25c>
				errorIncrement++;
			}
			errorIncrement = 0;
			
			//Translating from ASCII and setting length
			txFrame.length = ascii_to_dec(uartRxBuffer[parseIndex]);
     860:	00 91 50 03 	lds	r16, 0x0350
     864:	10 91 51 03 	lds	r17, 0x0351
     868:	98 01       	movw	r18, r16
     86a:	21 5a       	subi	r18, 0xA1	; 161
     86c:	3c 4f       	sbci	r19, 0xFC	; 252
     86e:	79 01       	movw	r14, r18
     870:	d9 01       	movw	r26, r18
     872:	8c 91       	ld	r24, X
     874:	0e 94 c3 02 	call	0x586	; 0x586 <ascii_to_dec>
     878:	80 93 5b 04 	sts	0x045B, r24
			
			//Looking for : and skips it if we find it, error otherwise
			while(uartRxBuffer[parseIndex] != ':')
     87c:	f7 01       	movw	r30, r14
     87e:	80 81       	ld	r24, Z
     880:	8a 33       	cpi	r24, 0x3A	; 58
     882:	09 f4       	brne	.+2      	; 0x886 <main+0x2e2>
     884:	81 c1       	rjmp	.+770    	; 0xb88 <__stack+0x289>
			{
				parseIndex = (parseIndex+1)%RX_BUFFER_SIZE;
     886:	c8 01       	movw	r24, r16
     888:	01 96       	adiw	r24, 0x01	; 1
     88a:	68 ec       	ldi	r22, 0xC8	; 200
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	0e 94 c9 05 	call	0xb92	; 0xb92 <__divmodhi4>
     892:	90 93 51 03 	sts	0x0351, r25
     896:	80 93 50 03 	sts	0x0350, r24
     89a:	e1 2c       	mov	r14, r1
     89c:	f1 2c       	mov	r15, r1
     89e:	08 ec       	ldi	r16, 0xC8	; 200
     8a0:	10 e0       	ldi	r17, 0x00	; 0
				{
					printf("ERROR, Could not find CAN Data in uartRxBuffer");
					break;
				} else if (errorIncrement > 1)
				{
					printf("ERROR, Looking for :, increment: %u", errorIncrement-1);
     8a2:	0f 2e       	mov	r0, r31
     8a4:	fe e9       	ldi	r31, 0x9E	; 158
     8a6:	6f 2e       	mov	r6, r31
     8a8:	f1 e0       	ldi	r31, 0x01	; 1
     8aa:	7f 2e       	mov	r7, r31
     8ac:	f0 2d       	mov	r31, r0
     8ae:	2a c0       	rjmp	.+84     	; 0x904 <__stack+0x5>
			txFrame.length = ascii_to_dec(uartRxBuffer[parseIndex]);
			
			//Looking for : and skips it if we find it, error otherwise
			while(uartRxBuffer[parseIndex] != ':')
			{
				parseIndex = (parseIndex+1)%RX_BUFFER_SIZE;
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	b8 01       	movw	r22, r16
     8b4:	0e 94 c9 05 	call	0xb92	; 0xb92 <__divmodhi4>
     8b8:	90 93 51 03 	sts	0x0351, r25
     8bc:	80 93 50 03 	sts	0x0350, r24
				if (errorIncrement == RX_BUFFER_SIZE)
     8c0:	f7 ec       	ldi	r31, 0xC7	; 199
     8c2:	ef 16       	cp	r14, r31
     8c4:	f1 04       	cpc	r15, r1
     8c6:	69 f4       	brne	.+26     	; 0x8e2 <main+0x33e>
				{
					printf("ERROR, Could not find CAN Data in uartRxBuffer");
     8c8:	82 ec       	ldi	r24, 0xC2	; 194
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	9f 93       	push	r25
     8ce:	8f 93       	push	r24
     8d0:	0e 94 3c 06 	call	0xc78	; 0xc78 <printf>
				errorIncrement++;
			}
			errorIncrement = 0;
			
			//Setting data
			for (int i = 0; i < txFrame.length; i++)
     8d4:	80 91 5b 04 	lds	r24, 0x045B
     8d8:	0f 90       	pop	r0
     8da:	0f 90       	pop	r0
     8dc:	81 11       	cpse	r24, r1
     8de:	1d c0       	rjmp	.+58     	; 0x91a <__stack+0x1b>
     8e0:	39 c1       	rjmp	.+626    	; 0xb54 <__stack+0x255>
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	8e 0d       	add	r24, r14
				parseIndex = (parseIndex+1)%RX_BUFFER_SIZE;
				if (errorIncrement == RX_BUFFER_SIZE)
				{
					printf("ERROR, Could not find CAN Data in uartRxBuffer");
					break;
				} else if (errorIncrement > 1)
     8e6:	82 30       	cpi	r24, 0x02	; 2
     8e8:	50 f0       	brcs	.+20     	; 0x8fe <main+0x35a>
				{
					printf("ERROR, Looking for :, increment: %u", errorIncrement-1);
     8ea:	ff 92       	push	r15
     8ec:	ef 92       	push	r14
     8ee:	7f 92       	push	r7
     8f0:	6f 92       	push	r6
     8f2:	0e 94 3c 06 	call	0xc78	; 0xc78 <printf>
     8f6:	0f 90       	pop	r0
     8f8:	0f 90       	pop	r0
     8fa:	0f 90       	pop	r0
     8fc:	0f 90       	pop	r0
     8fe:	2f ef       	ldi	r18, 0xFF	; 255
     900:	e2 1a       	sub	r14, r18
     902:	f2 0a       	sbc	r15, r18
			
			//Translating from ASCII and setting length
			txFrame.length = ascii_to_dec(uartRxBuffer[parseIndex]);
			
			//Looking for : and skips it if we find it, error otherwise
			while(uartRxBuffer[parseIndex] != ':')
     904:	80 91 50 03 	lds	r24, 0x0350
     908:	90 91 51 03 	lds	r25, 0x0351
     90c:	fc 01       	movw	r30, r24
     90e:	e1 5a       	subi	r30, 0xA1	; 161
     910:	fc 4f       	sbci	r31, 0xFC	; 252
     912:	20 81       	ld	r18, Z
     914:	2a 33       	cpi	r18, 0x3A	; 58
     916:	61 f6       	brne	.-104    	; 0x8b0 <main+0x30c>
     918:	0e c1       	rjmp	.+540    	; 0xb36 <__stack+0x237>
     91a:	a0 91 50 03 	lds	r26, 0x0350
     91e:	b0 91 51 03 	lds	r27, 0x0351
				errorIncrement++;
			}
			errorIncrement = 0;
			
			//Setting data
			for (int i = 0; i < txFrame.length; i++)
     922:	60 90 5b 04 	lds	r6, 0x045B
     926:	71 2c       	mov	r7, r1
     928:	ec e5       	ldi	r30, 0x5C	; 92
     92a:	f4 e0       	ldi	r31, 0x04	; 4
     92c:	fb 83       	std	Y+3, r31	; 0x03
     92e:	ea 83       	std	Y+2, r30	; 0x02
     930:	00 e0       	ldi	r16, 0x00	; 0
     932:	10 e0       	ldi	r17, 0x00	; 0
     934:	e1 2c       	mov	r14, r1
     936:	f1 2c       	mov	r15, r1
			{
				for (int j = (CAN_MESSAGE_DATA_LENGTH-1); j >= 0; j--)
				{
					canData += (ascii_to_dec(uartRxBuffer[parseIndex]) << 4*i);
					parseIndex = (parseIndex+1)%RX_BUFFER_SIZE;
     938:	be 83       	std	Y+6, r27	; 0x06
     93a:	ad 83       	std	Y+5, r26	; 0x05
     93c:	c7 01       	movw	r24, r14
     93e:	73 01       	movw	r14, r6
     940:	3c 01       	movw	r6, r24
			//Setting data
			for (int i = 0; i < txFrame.length; i++)
			{
				for (int j = (CAN_MESSAGE_DATA_LENGTH-1); j >= 0; j--)
				{
					canData += (ascii_to_dec(uartRxBuffer[parseIndex]) << 4*i);
     942:	ed 81       	ldd	r30, Y+5	; 0x05
     944:	fe 81       	ldd	r31, Y+6	; 0x06
     946:	e1 5a       	subi	r30, 0xA1	; 161
     948:	fc 4f       	sbci	r31, 0xFC	; 252
     94a:	80 81       	ld	r24, Z
     94c:	0e 94 c3 02 	call	0x586	; 0x586 <ascii_to_dec>
     950:	d8 2e       	mov	r13, r24
					parseIndex = (parseIndex+1)%RX_BUFFER_SIZE;
     952:	8d 81       	ldd	r24, Y+5	; 0x05
     954:	9e 81       	ldd	r25, Y+6	; 0x06
     956:	01 96       	adiw	r24, 0x01	; 1
     958:	68 ec       	ldi	r22, 0xC8	; 200
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	0e 94 c9 05 	call	0xb92	; 0xb92 <__divmodhi4>
     960:	9e 83       	std	Y+6, r25	; 0x06
     962:	8d 83       	std	Y+5, r24	; 0x05
			//Setting data
			for (int i = 0; i < txFrame.length; i++)
			{
				for (int j = (CAN_MESSAGE_DATA_LENGTH-1); j >= 0; j--)
				{
					canData += (ascii_to_dec(uartRxBuffer[parseIndex]) << 4*i);
     964:	fc 01       	movw	r30, r24
     966:	e1 5a       	subi	r30, 0xA1	; 161
     968:	fc 4f       	sbci	r31, 0xFC	; 252
     96a:	80 81       	ld	r24, Z
     96c:	0e 94 c3 02 	call	0x586	; 0x586 <ascii_to_dec>
     970:	28 2f       	mov	r18, r24
					parseIndex = (parseIndex+1)%RX_BUFFER_SIZE;
     972:	8d 81       	ldd	r24, Y+5	; 0x05
     974:	9e 81       	ldd	r25, Y+6	; 0x06
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	68 ec       	ldi	r22, 0xC8	; 200
     97a:	70 e0       	ldi	r23, 0x00	; 0
     97c:	0e 94 c9 05 	call	0xb92	; 0xb92 <__divmodhi4>
     980:	9e 83       	std	Y+6, r25	; 0x06
     982:	8d 83       	std	Y+5, r24	; 0x05
			//Setting data
			for (int i = 0; i < txFrame.length; i++)
			{
				for (int j = (CAN_MESSAGE_DATA_LENGTH-1); j >= 0; j--)
				{
					canData += (ascii_to_dec(uartRxBuffer[parseIndex]) << 4*i);
     984:	82 2f       	mov	r24, r18
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	9c 01       	movw	r18, r24
     98a:	00 2e       	mov	r0, r16
     98c:	02 c0       	rjmp	.+4      	; 0x992 <__stack+0x93>
     98e:	22 0f       	add	r18, r18
     990:	33 1f       	adc	r19, r19
     992:	0a 94       	dec	r0
     994:	e2 f7       	brpl	.-8      	; 0x98e <__stack+0x8f>
     996:	8d 2d       	mov	r24, r13
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	00 2e       	mov	r0, r16
     99c:	02 c0       	rjmp	.+4      	; 0x9a2 <__stack+0xa3>
     99e:	88 0f       	add	r24, r24
     9a0:	99 1f       	adc	r25, r25
     9a2:	0a 94       	dec	r0
     9a4:	e2 f7       	brpl	.-8      	; 0x99e <__stack+0x9f>
     9a6:	82 0f       	add	r24, r18
					parseIndex = (parseIndex+1)%RX_BUFFER_SIZE;
				}
				txFrame.data[i] = canData;
     9a8:	aa 81       	ldd	r26, Y+2	; 0x02
     9aa:	bb 81       	ldd	r27, Y+3	; 0x03
     9ac:	8d 93       	st	X+, r24
     9ae:	bb 83       	std	Y+3, r27	; 0x03
     9b0:	aa 83       	std	Y+2, r26	; 0x02
				errorIncrement++;
			}
			errorIncrement = 0;
			
			//Setting data
			for (int i = 0; i < txFrame.length; i++)
     9b2:	bf ef       	ldi	r27, 0xFF	; 255
     9b4:	6b 1a       	sub	r6, r27
     9b6:	7b 0a       	sbc	r7, r27
     9b8:	0c 5f       	subi	r16, 0xFC	; 252
     9ba:	1f 4f       	sbci	r17, 0xFF	; 255
     9bc:	6e 14       	cp	r6, r14
     9be:	7f 04       	cpc	r7, r15
     9c0:	0c f4       	brge	.+2      	; 0x9c4 <__stack+0xc5>
     9c2:	bf cf       	rjmp	.-130    	; 0x942 <__stack+0x43>
     9c4:	ed 81       	ldd	r30, Y+5	; 0x05
     9c6:	fe 81       	ldd	r31, Y+6	; 0x06
     9c8:	f0 93 51 03 	sts	0x0351, r31
     9cc:	e0 93 50 03 	sts	0x0350, r30
     9d0:	c1 c0       	rjmp	.+386    	; 0xb54 <__stack+0x255>
			}
			
			//Looking for ] and skips it if we find it, error otherwise
			while(uartRxBuffer[parseIndex] != ']')
			{
				parseIndex = (parseIndex+1)%RX_BUFFER_SIZE;
     9d2:	01 96       	adiw	r24, 0x01	; 1
     9d4:	b8 01       	movw	r22, r16
     9d6:	0e 94 c9 05 	call	0xb92	; 0xb92 <__divmodhi4>
     9da:	90 93 51 03 	sts	0x0351, r25
     9de:	80 93 50 03 	sts	0x0350, r24
				if (errorIncrement == RX_BUFFER_SIZE)
     9e2:	f7 ec       	ldi	r31, 0xC7	; 199
     9e4:	ef 16       	cp	r14, r31
     9e6:	f1 04       	cpc	r15, r1
     9e8:	49 f5       	brne	.+82     	; 0xa3c <__stack+0x13d>
				{
					printf("ERROR, Could not find ] in uartRxBuffer");
     9ea:	81 ef       	ldi	r24, 0xF1	; 241
     9ec:	91 e0       	ldi	r25, 0x01	; 1
     9ee:	9f 93       	push	r25
     9f0:	8f 93       	push	r24
     9f2:	0e 94 3c 06 	call	0xc78	; 0xc78 <printf>
				errorIncrement++;
			}
			errorIncrement = 0;
			
			//Looking for \n and skips it if we find it, error otherwise
			while(uartRxBuffer[parseIndex] != '\n')
     9f6:	80 91 50 03 	lds	r24, 0x0350
     9fa:	90 91 51 03 	lds	r25, 0x0351
     9fe:	fc 01       	movw	r30, r24
     a00:	e1 5a       	subi	r30, 0xA1	; 161
     a02:	fc 4f       	sbci	r31, 0xFC	; 252
     a04:	0f 90       	pop	r0
     a06:	0f 90       	pop	r0
     a08:	20 81       	ld	r18, Z
     a0a:	2a 30       	cpi	r18, 0x0A	; 10
     a0c:	09 f0       	breq	.+2      	; 0xa10 <__stack+0x111>
     a0e:	ad c0       	rjmp	.+346    	; 0xb6a <__stack+0x26b>
     a10:	6d c0       	rjmp	.+218    	; 0xaec <__stack+0x1ed>
			{
				parseIndex = (parseIndex+1)%RX_BUFFER_SIZE;
     a12:	01 96       	adiw	r24, 0x01	; 1
     a14:	68 ec       	ldi	r22, 0xC8	; 200
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	0e 94 c9 05 	call	0xb92	; 0xb92 <__divmodhi4>
     a1c:	90 93 51 03 	sts	0x0351, r25
     a20:	80 93 50 03 	sts	0x0350, r24
     a24:	3d c0       	rjmp	.+122    	; 0xaa0 <__stack+0x1a1>
				errorIncrement++;
			}
			errorIncrement = 0;
			
			//Setting data
			for (int i = 0; i < txFrame.length; i++)
     a26:	e1 2c       	mov	r14, r1
     a28:	f1 2c       	mov	r15, r1
			}
			
			//Looking for ] and skips it if we find it, error otherwise
			while(uartRxBuffer[parseIndex] != ']')
			{
				parseIndex = (parseIndex+1)%RX_BUFFER_SIZE;
     a2a:	08 ec       	ldi	r16, 0xC8	; 200
     a2c:	10 e0       	ldi	r17, 0x00	; 0
				{
					printf("ERROR, Could not find ] in uartRxBuffer");
					break;
				} else if (errorIncrement > 1)
				{
					printf("ERROR, Looking for ], increment: %u", errorIncrement-1);
     a2e:	0f 2e       	mov	r0, r31
     a30:	f9 e1       	ldi	r31, 0x19	; 25
     a32:	6f 2e       	mov	r6, r31
     a34:	f2 e0       	ldi	r31, 0x02	; 2
     a36:	7f 2e       	mov	r7, r31
     a38:	f0 2d       	mov	r31, r0
     a3a:	11 c0       	rjmp	.+34     	; 0xa5e <__stack+0x15f>
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	8e 0d       	add	r24, r14
				parseIndex = (parseIndex+1)%RX_BUFFER_SIZE;
				if (errorIncrement == RX_BUFFER_SIZE)
				{
					printf("ERROR, Could not find ] in uartRxBuffer");
					break;
				} else if (errorIncrement > 1)
     a40:	82 30       	cpi	r24, 0x02	; 2
     a42:	50 f0       	brcs	.+20     	; 0xa58 <__stack+0x159>
				{
					printf("ERROR, Looking for ], increment: %u", errorIncrement-1);
     a44:	ff 92       	push	r15
     a46:	ef 92       	push	r14
     a48:	7f 92       	push	r7
     a4a:	6f 92       	push	r6
     a4c:	0e 94 3c 06 	call	0xc78	; 0xc78 <printf>
     a50:	0f 90       	pop	r0
     a52:	0f 90       	pop	r0
     a54:	0f 90       	pop	r0
     a56:	0f 90       	pop	r0
     a58:	2f ef       	ldi	r18, 0xFF	; 255
     a5a:	e2 1a       	sub	r14, r18
     a5c:	f2 0a       	sbc	r15, r18
				txFrame.data[i] = canData;
				canData = 0;
			}
			
			//Looking for ] and skips it if we find it, error otherwise
			while(uartRxBuffer[parseIndex] != ']')
     a5e:	80 91 50 03 	lds	r24, 0x0350
     a62:	90 91 51 03 	lds	r25, 0x0351
     a66:	fc 01       	movw	r30, r24
     a68:	e1 5a       	subi	r30, 0xA1	; 161
     a6a:	fc 4f       	sbci	r31, 0xFC	; 252
     a6c:	20 81       	ld	r18, Z
     a6e:	2d 35       	cpi	r18, 0x5D	; 93
     a70:	09 f0       	breq	.+2      	; 0xa74 <__stack+0x175>
     a72:	af cf       	rjmp	.-162    	; 0x9d2 <__stack+0xd3>
     a74:	ce cf       	rjmp	.-100    	; 0xa12 <__stack+0x113>
			errorIncrement = 0;
			
			//Looking for \n and skips it if we find it, error otherwise
			while(uartRxBuffer[parseIndex] != '\n')
			{
				parseIndex = (parseIndex+1)%RX_BUFFER_SIZE;
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	b8 01       	movw	r22, r16
     a7a:	0e 94 c9 05 	call	0xb92	; 0xb92 <__divmodhi4>
     a7e:	90 93 51 03 	sts	0x0351, r25
     a82:	80 93 50 03 	sts	0x0350, r24
				if (errorIncrement == RX_BUFFER_SIZE)
     a86:	37 ec       	ldi	r19, 0xC7	; 199
     a88:	e3 16       	cp	r14, r19
     a8a:	f1 04       	cpc	r15, r1
     a8c:	a1 f4       	brne	.+40     	; 0xab6 <__stack+0x1b7>
				{
					printf("ERROR, Could not find end of CAN Data in uartRxBuffer");
     a8e:	8d e3       	ldi	r24, 0x3D	; 61
     a90:	92 e0       	ldi	r25, 0x02	; 2
     a92:	9f 93       	push	r25
     a94:	8f 93       	push	r24
     a96:	0e 94 3c 06 	call	0xc78	; 0xc78 <printf>
					break;
     a9a:	0f 90       	pop	r0
     a9c:	0f 90       	pop	r0
     a9e:	26 c0       	rjmp	.+76     	; 0xaec <__stack+0x1ed>
				errorIncrement++;
			}
			errorIncrement = 0;
			
			//Setting data
			for (int i = 0; i < txFrame.length; i++)
     aa0:	e1 2c       	mov	r14, r1
     aa2:	f1 2c       	mov	r15, r1
			errorIncrement = 0;
			
			//Looking for \n and skips it if we find it, error otherwise
			while(uartRxBuffer[parseIndex] != '\n')
			{
				parseIndex = (parseIndex+1)%RX_BUFFER_SIZE;
     aa4:	08 ec       	ldi	r16, 0xC8	; 200
     aa6:	10 e0       	ldi	r17, 0x00	; 0
				{
					printf("ERROR, Could not find end of CAN Data in uartRxBuffer");
					break;
				} else if (errorIncrement > 1)
				{
					printf("ERROR, Looking for \n, increment: %u", errorIncrement-1);
     aa8:	0f 2e       	mov	r0, r31
     aaa:	f3 e7       	ldi	r31, 0x73	; 115
     aac:	6f 2e       	mov	r6, r31
     aae:	f2 e0       	ldi	r31, 0x02	; 2
     ab0:	7f 2e       	mov	r7, r31
     ab2:	f0 2d       	mov	r31, r0
     ab4:	11 c0       	rjmp	.+34     	; 0xad8 <__stack+0x1d9>
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	8e 0d       	add	r24, r14
				parseIndex = (parseIndex+1)%RX_BUFFER_SIZE;
				if (errorIncrement == RX_BUFFER_SIZE)
				{
					printf("ERROR, Could not find end of CAN Data in uartRxBuffer");
					break;
				} else if (errorIncrement > 1)
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	50 f0       	brcs	.+20     	; 0xad2 <__stack+0x1d3>
				{
					printf("ERROR, Looking for \n, increment: %u", errorIncrement-1);
     abe:	ff 92       	push	r15
     ac0:	ef 92       	push	r14
     ac2:	7f 92       	push	r7
     ac4:	6f 92       	push	r6
     ac6:	0e 94 3c 06 	call	0xc78	; 0xc78 <printf>
     aca:	0f 90       	pop	r0
     acc:	0f 90       	pop	r0
     ace:	0f 90       	pop	r0
     ad0:	0f 90       	pop	r0
     ad2:	8f ef       	ldi	r24, 0xFF	; 255
     ad4:	e8 1a       	sub	r14, r24
     ad6:	f8 0a       	sbc	r15, r24
				errorIncrement++;
			}
			errorIncrement = 0;
			
			//Looking for \n and skips it if we find it, error otherwise
			while(uartRxBuffer[parseIndex] != '\n')
     ad8:	80 91 50 03 	lds	r24, 0x0350
     adc:	90 91 51 03 	lds	r25, 0x0351
     ae0:	fc 01       	movw	r30, r24
     ae2:	e1 5a       	subi	r30, 0xA1	; 161
     ae4:	fc 4f       	sbci	r31, 0xFC	; 252
     ae6:	20 81       	ld	r18, Z
     ae8:	2a 30       	cpi	r18, 0x0A	; 10
     aea:	29 f6       	brne	.-118    	; 0xa76 <__stack+0x177>
					printf("ERROR, Looking for \n, increment: %u", errorIncrement-1);
				}
				errorIncrement++;
			}
			errorIncrement = 0;
			can_send_message(&txFrame);
     aec:	89 e5       	ldi	r24, 0x59	; 89
     aee:	94 e0       	ldi	r25, 0x04	; 4
     af0:	0e 94 da 01 	call	0x3b4	; 0x3b4 <can_send_message>
			newUartMessage = 0;
     af4:	10 92 4f 03 	sts	0x034F, r1
     af8:	10 92 4e 03 	sts	0x034E, r1
     afc:	7b cd       	rjmp	.-1290   	; 0x5f4 <main+0x50>
     afe:	a0 91 50 03 	lds	r26, 0x0350
     b02:	b0 91 51 03 	lds	r27, 0x0351
			uint8_t canData = 0;
			
			//Looking for [ and skips it if we find it, error otherwise
			while(uartRxBuffer[parseIndex] != '[')
			{
				parseIndex = (parseIndex+1)%RX_BUFFER_SIZE;
     b06:	68 94       	set
     b08:	ee 24       	eor	r14, r14
     b0a:	e3 f8       	bld	r14, 3
     b0c:	f1 2c       	mov	r15, r1
     b0e:	00 e0       	ldi	r16, 0x00	; 0
     b10:	10 e0       	ldi	r17, 0x00	; 0
			
			// Setting CAN-ID
			for (int i = CAN_MESSAGE_ID_LENGTH-1; i >= 0; i--)
			{
				canId += (ascii_to_dec(uartRxBuffer[parseIndex]) << 4*i);
				parseIndex = (parseIndex+1)%RX_BUFFER_SIZE;
     b12:	0f 2e       	mov	r0, r31
     b14:	f8 ec       	ldi	r31, 0xC8	; 200
     b16:	6f 2e       	mov	r6, r31
     b18:	71 2c       	mov	r7, r1
     b1a:	f0 2d       	mov	r31, r0
     b1c:	bb 83       	std	Y+3, r27	; 0x03
     b1e:	aa 83       	std	Y+2, r26	; 0x02
     b20:	29 ce       	rjmp	.-942    	; 0x774 <main+0x1d0>
			}
			
			//Looking for ] and skips it if we find it, error otherwise
			while(uartRxBuffer[parseIndex] != ']')
			{
				parseIndex = (parseIndex+1)%RX_BUFFER_SIZE;
     b22:	01 96       	adiw	r24, 0x01	; 1
     b24:	68 ec       	ldi	r22, 0xC8	; 200
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	0e 94 c9 05 	call	0xb92	; 0xb92 <__divmodhi4>
     b2c:	90 93 51 03 	sts	0x0351, r25
     b30:	80 93 50 03 	sts	0x0350, r24
     b34:	78 cf       	rjmp	.-272    	; 0xa26 <__stack+0x127>
				errorIncrement++;
			}
			errorIncrement = 0;
			
			//Setting data
			for (int i = 0; i < txFrame.length; i++)
     b36:	20 91 5b 04 	lds	r18, 0x045B
     b3a:	21 11       	cpse	r18, r1
     b3c:	ee ce       	rjmp	.-548    	; 0x91a <__stack+0x1b>
     b3e:	f1 cf       	rjmp	.-30     	; 0xb22 <__stack+0x223>
			}
			
			//Looking for ] and skips it if we find it, error otherwise
			while(uartRxBuffer[parseIndex] != ']')
			{
				parseIndex = (parseIndex+1)%RX_BUFFER_SIZE;
     b40:	01 96       	adiw	r24, 0x01	; 1
     b42:	68 ec       	ldi	r22, 0xC8	; 200
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	0e 94 c9 05 	call	0xb92	; 0xb92 <__divmodhi4>
     b4a:	90 93 51 03 	sts	0x0351, r25
     b4e:	80 93 50 03 	sts	0x0350, r24
     b52:	69 cf       	rjmp	.-302    	; 0xa26 <__stack+0x127>
				txFrame.data[i] = canData;
				canData = 0;
			}
			
			//Looking for ] and skips it if we find it, error otherwise
			while(uartRxBuffer[parseIndex] != ']')
     b54:	80 91 50 03 	lds	r24, 0x0350
     b58:	90 91 51 03 	lds	r25, 0x0351
     b5c:	fc 01       	movw	r30, r24
     b5e:	e1 5a       	subi	r30, 0xA1	; 161
     b60:	fc 4f       	sbci	r31, 0xFC	; 252
     b62:	20 81       	ld	r18, Z
     b64:	2d 35       	cpi	r18, 0x5D	; 93
     b66:	61 f7       	brne	.-40     	; 0xb40 <__stack+0x241>
     b68:	54 cf       	rjmp	.-344    	; 0xa12 <__stack+0x113>
			errorIncrement = 0;
			
			//Looking for \n and skips it if we find it, error otherwise
			while(uartRxBuffer[parseIndex] != '\n')
			{
				parseIndex = (parseIndex+1)%RX_BUFFER_SIZE;
     b6a:	01 96       	adiw	r24, 0x01	; 1
     b6c:	68 ec       	ldi	r22, 0xC8	; 200
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	0e 94 c9 05 	call	0xb92	; 0xb92 <__divmodhi4>
     b74:	90 93 51 03 	sts	0x0351, r25
     b78:	80 93 50 03 	sts	0x0350, r24
     b7c:	91 cf       	rjmp	.-222    	; 0xaa0 <__stack+0x1a1>
				txFrame.data[i] = canData;
				canData = 0;
			}
			
			//Looking for ] and skips it if we find it, error otherwise
			while(uartRxBuffer[parseIndex] != ']')
     b7e:	80 91 50 03 	lds	r24, 0x0350
     b82:	90 91 51 03 	lds	r25, 0x0351
     b86:	dc cf       	rjmp	.-72     	; 0xb40 <__stack+0x241>
				errorIncrement++;
			}
			errorIncrement = 0;
			
			//Setting data
			for (int i = 0; i < txFrame.length; i++)
     b88:	80 91 5b 04 	lds	r24, 0x045B
     b8c:	81 11       	cpse	r24, r1
     b8e:	c5 ce       	rjmp	.-630    	; 0x91a <__stack+0x1b>
     b90:	f6 cf       	rjmp	.-20     	; 0xb7e <__stack+0x27f>

00000b92 <__divmodhi4>:
     b92:	97 fb       	bst	r25, 7
     b94:	07 2e       	mov	r0, r23
     b96:	16 f4       	brtc	.+4      	; 0xb9c <__divmodhi4+0xa>
     b98:	00 94       	com	r0
     b9a:	07 d0       	rcall	.+14     	; 0xbaa <__divmodhi4_neg1>
     b9c:	77 fd       	sbrc	r23, 7
     b9e:	09 d0       	rcall	.+18     	; 0xbb2 <__divmodhi4_neg2>
     ba0:	0e 94 dd 05 	call	0xbba	; 0xbba <__udivmodhi4>
     ba4:	07 fc       	sbrc	r0, 7
     ba6:	05 d0       	rcall	.+10     	; 0xbb2 <__divmodhi4_neg2>
     ba8:	3e f4       	brtc	.+14     	; 0xbb8 <__divmodhi4_exit>

00000baa <__divmodhi4_neg1>:
     baa:	90 95       	com	r25
     bac:	81 95       	neg	r24
     bae:	9f 4f       	sbci	r25, 0xFF	; 255
     bb0:	08 95       	ret

00000bb2 <__divmodhi4_neg2>:
     bb2:	70 95       	com	r23
     bb4:	61 95       	neg	r22
     bb6:	7f 4f       	sbci	r23, 0xFF	; 255

00000bb8 <__divmodhi4_exit>:
     bb8:	08 95       	ret

00000bba <__udivmodhi4>:
     bba:	aa 1b       	sub	r26, r26
     bbc:	bb 1b       	sub	r27, r27
     bbe:	51 e1       	ldi	r21, 0x11	; 17
     bc0:	07 c0       	rjmp	.+14     	; 0xbd0 <__udivmodhi4_ep>

00000bc2 <__udivmodhi4_loop>:
     bc2:	aa 1f       	adc	r26, r26
     bc4:	bb 1f       	adc	r27, r27
     bc6:	a6 17       	cp	r26, r22
     bc8:	b7 07       	cpc	r27, r23
     bca:	10 f0       	brcs	.+4      	; 0xbd0 <__udivmodhi4_ep>
     bcc:	a6 1b       	sub	r26, r22
     bce:	b7 0b       	sbc	r27, r23

00000bd0 <__udivmodhi4_ep>:
     bd0:	88 1f       	adc	r24, r24
     bd2:	99 1f       	adc	r25, r25
     bd4:	5a 95       	dec	r21
     bd6:	a9 f7       	brne	.-22     	; 0xbc2 <__udivmodhi4_loop>
     bd8:	80 95       	com	r24
     bda:	90 95       	com	r25
     bdc:	bc 01       	movw	r22, r24
     bde:	cd 01       	movw	r24, r26
     be0:	08 95       	ret

00000be2 <fdevopen>:
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	00 97       	sbiw	r24, 0x00	; 0
     bec:	31 f4       	brne	.+12     	; 0xbfa <fdevopen+0x18>
     bee:	61 15       	cp	r22, r1
     bf0:	71 05       	cpc	r23, r1
     bf2:	19 f4       	brne	.+6      	; 0xbfa <fdevopen+0x18>
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	3a c0       	rjmp	.+116    	; 0xc6e <fdevopen+0x8c>
     bfa:	8b 01       	movw	r16, r22
     bfc:	ec 01       	movw	r28, r24
     bfe:	6e e0       	ldi	r22, 0x0E	; 14
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	0e 94 47 08 	call	0x108e	; 0x108e <calloc>
     c0a:	fc 01       	movw	r30, r24
     c0c:	89 2b       	or	r24, r25
     c0e:	91 f3       	breq	.-28     	; 0xbf4 <fdevopen+0x12>
     c10:	80 e8       	ldi	r24, 0x80	; 128
     c12:	83 83       	std	Z+3, r24	; 0x03
     c14:	01 15       	cp	r16, r1
     c16:	11 05       	cpc	r17, r1
     c18:	71 f0       	breq	.+28     	; 0xc36 <fdevopen+0x54>
     c1a:	13 87       	std	Z+11, r17	; 0x0b
     c1c:	02 87       	std	Z+10, r16	; 0x0a
     c1e:	81 e8       	ldi	r24, 0x81	; 129
     c20:	83 83       	std	Z+3, r24	; 0x03
     c22:	80 91 64 04 	lds	r24, 0x0464
     c26:	90 91 65 04 	lds	r25, 0x0465
     c2a:	89 2b       	or	r24, r25
     c2c:	21 f4       	brne	.+8      	; 0xc36 <fdevopen+0x54>
     c2e:	f0 93 65 04 	sts	0x0465, r31
     c32:	e0 93 64 04 	sts	0x0464, r30
     c36:	20 97       	sbiw	r28, 0x00	; 0
     c38:	c9 f0       	breq	.+50     	; 0xc6c <fdevopen+0x8a>
     c3a:	d1 87       	std	Z+9, r29	; 0x09
     c3c:	c0 87       	std	Z+8, r28	; 0x08
     c3e:	83 81       	ldd	r24, Z+3	; 0x03
     c40:	82 60       	ori	r24, 0x02	; 2
     c42:	83 83       	std	Z+3, r24	; 0x03
     c44:	80 91 66 04 	lds	r24, 0x0466
     c48:	90 91 67 04 	lds	r25, 0x0467
     c4c:	89 2b       	or	r24, r25
     c4e:	71 f4       	brne	.+28     	; 0xc6c <fdevopen+0x8a>
     c50:	f0 93 67 04 	sts	0x0467, r31
     c54:	e0 93 66 04 	sts	0x0466, r30
     c58:	80 91 68 04 	lds	r24, 0x0468
     c5c:	90 91 69 04 	lds	r25, 0x0469
     c60:	89 2b       	or	r24, r25
     c62:	21 f4       	brne	.+8      	; 0xc6c <fdevopen+0x8a>
     c64:	f0 93 69 04 	sts	0x0469, r31
     c68:	e0 93 68 04 	sts	0x0468, r30
     c6c:	cf 01       	movw	r24, r30
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	1f 91       	pop	r17
     c74:	0f 91       	pop	r16
     c76:	08 95       	ret

00000c78 <printf>:
     c78:	a0 e0       	ldi	r26, 0x00	; 0
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	e2 e4       	ldi	r30, 0x42	; 66
     c7e:	f6 e0       	ldi	r31, 0x06	; 6
     c80:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <__prologue_saves__+0x20>
     c84:	ae 01       	movw	r20, r28
     c86:	4b 5f       	subi	r20, 0xFB	; 251
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	fa 01       	movw	r30, r20
     c8c:	61 91       	ld	r22, Z+
     c8e:	71 91       	ld	r23, Z+
     c90:	af 01       	movw	r20, r30
     c92:	80 91 66 04 	lds	r24, 0x0466
     c96:	90 91 67 04 	lds	r25, 0x0467
     c9a:	0e 94 75 06 	call	0xcea	; 0xcea <vfprintf>
     c9e:	e2 e0       	ldi	r30, 0x02	; 2
     ca0:	0c 94 6f 0a 	jmp	0x14de	; 0x14de <__epilogue_restores__+0x20>

00000ca4 <sprintf>:
     ca4:	ae e0       	ldi	r26, 0x0E	; 14
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	e8 e5       	ldi	r30, 0x58	; 88
     caa:	f6 e0       	ldi	r31, 0x06	; 6
     cac:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__prologue_saves__+0x1c>
     cb0:	0d 89       	ldd	r16, Y+21	; 0x15
     cb2:	1e 89       	ldd	r17, Y+22	; 0x16
     cb4:	86 e0       	ldi	r24, 0x06	; 6
     cb6:	8c 83       	std	Y+4, r24	; 0x04
     cb8:	1a 83       	std	Y+2, r17	; 0x02
     cba:	09 83       	std	Y+1, r16	; 0x01
     cbc:	8f ef       	ldi	r24, 0xFF	; 255
     cbe:	9f e7       	ldi	r25, 0x7F	; 127
     cc0:	9e 83       	std	Y+6, r25	; 0x06
     cc2:	8d 83       	std	Y+5, r24	; 0x05
     cc4:	ae 01       	movw	r20, r28
     cc6:	47 5e       	subi	r20, 0xE7	; 231
     cc8:	5f 4f       	sbci	r21, 0xFF	; 255
     cca:	6f 89       	ldd	r22, Y+23	; 0x17
     ccc:	78 8d       	ldd	r23, Y+24	; 0x18
     cce:	ce 01       	movw	r24, r28
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	0e 94 75 06 	call	0xcea	; 0xcea <vfprintf>
     cd6:	2f 81       	ldd	r18, Y+7	; 0x07
     cd8:	38 85       	ldd	r19, Y+8	; 0x08
     cda:	f8 01       	movw	r30, r16
     cdc:	e2 0f       	add	r30, r18
     cde:	f3 1f       	adc	r31, r19
     ce0:	10 82       	st	Z, r1
     ce2:	2e 96       	adiw	r28, 0x0e	; 14
     ce4:	e4 e0       	ldi	r30, 0x04	; 4
     ce6:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__epilogue_restores__+0x1c>

00000cea <vfprintf>:
     cea:	ac e0       	ldi	r26, 0x0C	; 12
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	eb e7       	ldi	r30, 0x7B	; 123
     cf0:	f6 e0       	ldi	r31, 0x06	; 6
     cf2:	0c 94 43 0a 	jmp	0x1486	; 0x1486 <__prologue_saves__>
     cf6:	7c 01       	movw	r14, r24
     cf8:	6b 01       	movw	r12, r22
     cfa:	8a 01       	movw	r16, r20
     cfc:	fc 01       	movw	r30, r24
     cfe:	17 82       	std	Z+7, r1	; 0x07
     d00:	16 82       	std	Z+6, r1	; 0x06
     d02:	83 81       	ldd	r24, Z+3	; 0x03
     d04:	81 ff       	sbrs	r24, 1
     d06:	bd c1       	rjmp	.+890    	; 0x1082 <vfprintf+0x398>
     d08:	ce 01       	movw	r24, r28
     d0a:	01 96       	adiw	r24, 0x01	; 1
     d0c:	4c 01       	movw	r8, r24
     d0e:	f7 01       	movw	r30, r14
     d10:	93 81       	ldd	r25, Z+3	; 0x03
     d12:	f6 01       	movw	r30, r12
     d14:	93 fd       	sbrc	r25, 3
     d16:	85 91       	lpm	r24, Z+
     d18:	93 ff       	sbrs	r25, 3
     d1a:	81 91       	ld	r24, Z+
     d1c:	6f 01       	movw	r12, r30
     d1e:	88 23       	and	r24, r24
     d20:	09 f4       	brne	.+2      	; 0xd24 <vfprintf+0x3a>
     d22:	ab c1       	rjmp	.+854    	; 0x107a <vfprintf+0x390>
     d24:	85 32       	cpi	r24, 0x25	; 37
     d26:	39 f4       	brne	.+14     	; 0xd36 <vfprintf+0x4c>
     d28:	93 fd       	sbrc	r25, 3
     d2a:	85 91       	lpm	r24, Z+
     d2c:	93 ff       	sbrs	r25, 3
     d2e:	81 91       	ld	r24, Z+
     d30:	6f 01       	movw	r12, r30
     d32:	85 32       	cpi	r24, 0x25	; 37
     d34:	29 f4       	brne	.+10     	; 0xd40 <vfprintf+0x56>
     d36:	b7 01       	movw	r22, r14
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 ad 09 	call	0x135a	; 0x135a <fputc>
     d3e:	e7 cf       	rjmp	.-50     	; 0xd0e <vfprintf+0x24>
     d40:	51 2c       	mov	r5, r1
     d42:	31 2c       	mov	r3, r1
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	20 32       	cpi	r18, 0x20	; 32
     d48:	a0 f4       	brcc	.+40     	; 0xd72 <vfprintf+0x88>
     d4a:	8b 32       	cpi	r24, 0x2B	; 43
     d4c:	69 f0       	breq	.+26     	; 0xd68 <vfprintf+0x7e>
     d4e:	30 f4       	brcc	.+12     	; 0xd5c <vfprintf+0x72>
     d50:	80 32       	cpi	r24, 0x20	; 32
     d52:	59 f0       	breq	.+22     	; 0xd6a <vfprintf+0x80>
     d54:	83 32       	cpi	r24, 0x23	; 35
     d56:	69 f4       	brne	.+26     	; 0xd72 <vfprintf+0x88>
     d58:	20 61       	ori	r18, 0x10	; 16
     d5a:	2c c0       	rjmp	.+88     	; 0xdb4 <vfprintf+0xca>
     d5c:	8d 32       	cpi	r24, 0x2D	; 45
     d5e:	39 f0       	breq	.+14     	; 0xd6e <vfprintf+0x84>
     d60:	80 33       	cpi	r24, 0x30	; 48
     d62:	39 f4       	brne	.+14     	; 0xd72 <vfprintf+0x88>
     d64:	21 60       	ori	r18, 0x01	; 1
     d66:	26 c0       	rjmp	.+76     	; 0xdb4 <vfprintf+0xca>
     d68:	22 60       	ori	r18, 0x02	; 2
     d6a:	24 60       	ori	r18, 0x04	; 4
     d6c:	23 c0       	rjmp	.+70     	; 0xdb4 <vfprintf+0xca>
     d6e:	28 60       	ori	r18, 0x08	; 8
     d70:	21 c0       	rjmp	.+66     	; 0xdb4 <vfprintf+0xca>
     d72:	27 fd       	sbrc	r18, 7
     d74:	27 c0       	rjmp	.+78     	; 0xdc4 <vfprintf+0xda>
     d76:	30 ed       	ldi	r19, 0xD0	; 208
     d78:	38 0f       	add	r19, r24
     d7a:	3a 30       	cpi	r19, 0x0A	; 10
     d7c:	78 f4       	brcc	.+30     	; 0xd9c <vfprintf+0xb2>
     d7e:	26 ff       	sbrs	r18, 6
     d80:	06 c0       	rjmp	.+12     	; 0xd8e <vfprintf+0xa4>
     d82:	fa e0       	ldi	r31, 0x0A	; 10
     d84:	5f 9e       	mul	r5, r31
     d86:	30 0d       	add	r19, r0
     d88:	11 24       	eor	r1, r1
     d8a:	53 2e       	mov	r5, r19
     d8c:	13 c0       	rjmp	.+38     	; 0xdb4 <vfprintf+0xca>
     d8e:	8a e0       	ldi	r24, 0x0A	; 10
     d90:	38 9e       	mul	r3, r24
     d92:	30 0d       	add	r19, r0
     d94:	11 24       	eor	r1, r1
     d96:	33 2e       	mov	r3, r19
     d98:	20 62       	ori	r18, 0x20	; 32
     d9a:	0c c0       	rjmp	.+24     	; 0xdb4 <vfprintf+0xca>
     d9c:	8e 32       	cpi	r24, 0x2E	; 46
     d9e:	21 f4       	brne	.+8      	; 0xda8 <vfprintf+0xbe>
     da0:	26 fd       	sbrc	r18, 6
     da2:	6b c1       	rjmp	.+726    	; 0x107a <vfprintf+0x390>
     da4:	20 64       	ori	r18, 0x40	; 64
     da6:	06 c0       	rjmp	.+12     	; 0xdb4 <vfprintf+0xca>
     da8:	8c 36       	cpi	r24, 0x6C	; 108
     daa:	11 f4       	brne	.+4      	; 0xdb0 <vfprintf+0xc6>
     dac:	20 68       	ori	r18, 0x80	; 128
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <vfprintf+0xca>
     db0:	88 36       	cpi	r24, 0x68	; 104
     db2:	41 f4       	brne	.+16     	; 0xdc4 <vfprintf+0xda>
     db4:	f6 01       	movw	r30, r12
     db6:	93 fd       	sbrc	r25, 3
     db8:	85 91       	lpm	r24, Z+
     dba:	93 ff       	sbrs	r25, 3
     dbc:	81 91       	ld	r24, Z+
     dbe:	6f 01       	movw	r12, r30
     dc0:	81 11       	cpse	r24, r1
     dc2:	c1 cf       	rjmp	.-126    	; 0xd46 <vfprintf+0x5c>
     dc4:	98 2f       	mov	r25, r24
     dc6:	9f 7d       	andi	r25, 0xDF	; 223
     dc8:	95 54       	subi	r25, 0x45	; 69
     dca:	93 30       	cpi	r25, 0x03	; 3
     dcc:	28 f4       	brcc	.+10     	; 0xdd8 <vfprintf+0xee>
     dce:	0c 5f       	subi	r16, 0xFC	; 252
     dd0:	1f 4f       	sbci	r17, 0xFF	; 255
     dd2:	ff e3       	ldi	r31, 0x3F	; 63
     dd4:	f9 83       	std	Y+1, r31	; 0x01
     dd6:	0d c0       	rjmp	.+26     	; 0xdf2 <vfprintf+0x108>
     dd8:	83 36       	cpi	r24, 0x63	; 99
     dda:	31 f0       	breq	.+12     	; 0xde8 <vfprintf+0xfe>
     ddc:	83 37       	cpi	r24, 0x73	; 115
     dde:	71 f0       	breq	.+28     	; 0xdfc <vfprintf+0x112>
     de0:	83 35       	cpi	r24, 0x53	; 83
     de2:	09 f0       	breq	.+2      	; 0xde6 <vfprintf+0xfc>
     de4:	5b c0       	rjmp	.+182    	; 0xe9c <vfprintf+0x1b2>
     de6:	22 c0       	rjmp	.+68     	; 0xe2c <vfprintf+0x142>
     de8:	f8 01       	movw	r30, r16
     dea:	80 81       	ld	r24, Z
     dec:	89 83       	std	Y+1, r24	; 0x01
     dee:	0e 5f       	subi	r16, 0xFE	; 254
     df0:	1f 4f       	sbci	r17, 0xFF	; 255
     df2:	44 24       	eor	r4, r4
     df4:	43 94       	inc	r4
     df6:	51 2c       	mov	r5, r1
     df8:	54 01       	movw	r10, r8
     dfa:	15 c0       	rjmp	.+42     	; 0xe26 <vfprintf+0x13c>
     dfc:	38 01       	movw	r6, r16
     dfe:	f2 e0       	ldi	r31, 0x02	; 2
     e00:	6f 0e       	add	r6, r31
     e02:	71 1c       	adc	r7, r1
     e04:	f8 01       	movw	r30, r16
     e06:	a0 80       	ld	r10, Z
     e08:	b1 80       	ldd	r11, Z+1	; 0x01
     e0a:	26 ff       	sbrs	r18, 6
     e0c:	03 c0       	rjmp	.+6      	; 0xe14 <vfprintf+0x12a>
     e0e:	65 2d       	mov	r22, r5
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <vfprintf+0x12e>
     e14:	6f ef       	ldi	r22, 0xFF	; 255
     e16:	7f ef       	ldi	r23, 0xFF	; 255
     e18:	c5 01       	movw	r24, r10
     e1a:	2c 87       	std	Y+12, r18	; 0x0c
     e1c:	0e 94 a2 09 	call	0x1344	; 0x1344 <strnlen>
     e20:	2c 01       	movw	r4, r24
     e22:	83 01       	movw	r16, r6
     e24:	2c 85       	ldd	r18, Y+12	; 0x0c
     e26:	2f 77       	andi	r18, 0x7F	; 127
     e28:	22 2e       	mov	r2, r18
     e2a:	17 c0       	rjmp	.+46     	; 0xe5a <vfprintf+0x170>
     e2c:	38 01       	movw	r6, r16
     e2e:	f2 e0       	ldi	r31, 0x02	; 2
     e30:	6f 0e       	add	r6, r31
     e32:	71 1c       	adc	r7, r1
     e34:	f8 01       	movw	r30, r16
     e36:	a0 80       	ld	r10, Z
     e38:	b1 80       	ldd	r11, Z+1	; 0x01
     e3a:	26 ff       	sbrs	r18, 6
     e3c:	03 c0       	rjmp	.+6      	; 0xe44 <vfprintf+0x15a>
     e3e:	65 2d       	mov	r22, r5
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <vfprintf+0x15e>
     e44:	6f ef       	ldi	r22, 0xFF	; 255
     e46:	7f ef       	ldi	r23, 0xFF	; 255
     e48:	c5 01       	movw	r24, r10
     e4a:	2c 87       	std	Y+12, r18	; 0x0c
     e4c:	0e 94 90 09 	call	0x1320	; 0x1320 <strnlen_P>
     e50:	2c 01       	movw	r4, r24
     e52:	2c 85       	ldd	r18, Y+12	; 0x0c
     e54:	20 68       	ori	r18, 0x80	; 128
     e56:	22 2e       	mov	r2, r18
     e58:	83 01       	movw	r16, r6
     e5a:	23 fc       	sbrc	r2, 3
     e5c:	1b c0       	rjmp	.+54     	; 0xe94 <vfprintf+0x1aa>
     e5e:	83 2d       	mov	r24, r3
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	48 16       	cp	r4, r24
     e64:	59 06       	cpc	r5, r25
     e66:	b0 f4       	brcc	.+44     	; 0xe94 <vfprintf+0x1aa>
     e68:	b7 01       	movw	r22, r14
     e6a:	80 e2       	ldi	r24, 0x20	; 32
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	0e 94 ad 09 	call	0x135a	; 0x135a <fputc>
     e72:	3a 94       	dec	r3
     e74:	f4 cf       	rjmp	.-24     	; 0xe5e <vfprintf+0x174>
     e76:	f5 01       	movw	r30, r10
     e78:	27 fc       	sbrc	r2, 7
     e7a:	85 91       	lpm	r24, Z+
     e7c:	27 fe       	sbrs	r2, 7
     e7e:	81 91       	ld	r24, Z+
     e80:	5f 01       	movw	r10, r30
     e82:	b7 01       	movw	r22, r14
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	0e 94 ad 09 	call	0x135a	; 0x135a <fputc>
     e8a:	31 10       	cpse	r3, r1
     e8c:	3a 94       	dec	r3
     e8e:	f1 e0       	ldi	r31, 0x01	; 1
     e90:	4f 1a       	sub	r4, r31
     e92:	51 08       	sbc	r5, r1
     e94:	41 14       	cp	r4, r1
     e96:	51 04       	cpc	r5, r1
     e98:	71 f7       	brne	.-36     	; 0xe76 <vfprintf+0x18c>
     e9a:	e5 c0       	rjmp	.+458    	; 0x1066 <vfprintf+0x37c>
     e9c:	84 36       	cpi	r24, 0x64	; 100
     e9e:	11 f0       	breq	.+4      	; 0xea4 <vfprintf+0x1ba>
     ea0:	89 36       	cpi	r24, 0x69	; 105
     ea2:	39 f5       	brne	.+78     	; 0xef2 <vfprintf+0x208>
     ea4:	f8 01       	movw	r30, r16
     ea6:	27 ff       	sbrs	r18, 7
     ea8:	07 c0       	rjmp	.+14     	; 0xeb8 <vfprintf+0x1ce>
     eaa:	60 81       	ld	r22, Z
     eac:	71 81       	ldd	r23, Z+1	; 0x01
     eae:	82 81       	ldd	r24, Z+2	; 0x02
     eb0:	93 81       	ldd	r25, Z+3	; 0x03
     eb2:	0c 5f       	subi	r16, 0xFC	; 252
     eb4:	1f 4f       	sbci	r17, 0xFF	; 255
     eb6:	08 c0       	rjmp	.+16     	; 0xec8 <vfprintf+0x1de>
     eb8:	60 81       	ld	r22, Z
     eba:	71 81       	ldd	r23, Z+1	; 0x01
     ebc:	07 2e       	mov	r0, r23
     ebe:	00 0c       	add	r0, r0
     ec0:	88 0b       	sbc	r24, r24
     ec2:	99 0b       	sbc	r25, r25
     ec4:	0e 5f       	subi	r16, 0xFE	; 254
     ec6:	1f 4f       	sbci	r17, 0xFF	; 255
     ec8:	2f 76       	andi	r18, 0x6F	; 111
     eca:	72 2e       	mov	r7, r18
     ecc:	97 ff       	sbrs	r25, 7
     ece:	09 c0       	rjmp	.+18     	; 0xee2 <vfprintf+0x1f8>
     ed0:	90 95       	com	r25
     ed2:	80 95       	com	r24
     ed4:	70 95       	com	r23
     ed6:	61 95       	neg	r22
     ed8:	7f 4f       	sbci	r23, 0xFF	; 255
     eda:	8f 4f       	sbci	r24, 0xFF	; 255
     edc:	9f 4f       	sbci	r25, 0xFF	; 255
     ede:	20 68       	ori	r18, 0x80	; 128
     ee0:	72 2e       	mov	r7, r18
     ee2:	2a e0       	ldi	r18, 0x0A	; 10
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	a4 01       	movw	r20, r8
     ee8:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__ultoa_invert>
     eec:	a8 2e       	mov	r10, r24
     eee:	a8 18       	sub	r10, r8
     ef0:	44 c0       	rjmp	.+136    	; 0xf7a <vfprintf+0x290>
     ef2:	85 37       	cpi	r24, 0x75	; 117
     ef4:	29 f4       	brne	.+10     	; 0xf00 <vfprintf+0x216>
     ef6:	2f 7e       	andi	r18, 0xEF	; 239
     ef8:	b2 2e       	mov	r11, r18
     efa:	2a e0       	ldi	r18, 0x0A	; 10
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	25 c0       	rjmp	.+74     	; 0xf4a <vfprintf+0x260>
     f00:	f2 2f       	mov	r31, r18
     f02:	f9 7f       	andi	r31, 0xF9	; 249
     f04:	bf 2e       	mov	r11, r31
     f06:	8f 36       	cpi	r24, 0x6F	; 111
     f08:	c1 f0       	breq	.+48     	; 0xf3a <vfprintf+0x250>
     f0a:	18 f4       	brcc	.+6      	; 0xf12 <vfprintf+0x228>
     f0c:	88 35       	cpi	r24, 0x58	; 88
     f0e:	79 f0       	breq	.+30     	; 0xf2e <vfprintf+0x244>
     f10:	b4 c0       	rjmp	.+360    	; 0x107a <vfprintf+0x390>
     f12:	80 37       	cpi	r24, 0x70	; 112
     f14:	19 f0       	breq	.+6      	; 0xf1c <vfprintf+0x232>
     f16:	88 37       	cpi	r24, 0x78	; 120
     f18:	21 f0       	breq	.+8      	; 0xf22 <vfprintf+0x238>
     f1a:	af c0       	rjmp	.+350    	; 0x107a <vfprintf+0x390>
     f1c:	2f 2f       	mov	r18, r31
     f1e:	20 61       	ori	r18, 0x10	; 16
     f20:	b2 2e       	mov	r11, r18
     f22:	b4 fe       	sbrs	r11, 4
     f24:	0d c0       	rjmp	.+26     	; 0xf40 <vfprintf+0x256>
     f26:	8b 2d       	mov	r24, r11
     f28:	84 60       	ori	r24, 0x04	; 4
     f2a:	b8 2e       	mov	r11, r24
     f2c:	09 c0       	rjmp	.+18     	; 0xf40 <vfprintf+0x256>
     f2e:	24 ff       	sbrs	r18, 4
     f30:	0a c0       	rjmp	.+20     	; 0xf46 <vfprintf+0x25c>
     f32:	9f 2f       	mov	r25, r31
     f34:	96 60       	ori	r25, 0x06	; 6
     f36:	b9 2e       	mov	r11, r25
     f38:	06 c0       	rjmp	.+12     	; 0xf46 <vfprintf+0x25c>
     f3a:	28 e0       	ldi	r18, 0x08	; 8
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	05 c0       	rjmp	.+10     	; 0xf4a <vfprintf+0x260>
     f40:	20 e1       	ldi	r18, 0x10	; 16
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <vfprintf+0x260>
     f46:	20 e1       	ldi	r18, 0x10	; 16
     f48:	32 e0       	ldi	r19, 0x02	; 2
     f4a:	f8 01       	movw	r30, r16
     f4c:	b7 fe       	sbrs	r11, 7
     f4e:	07 c0       	rjmp	.+14     	; 0xf5e <vfprintf+0x274>
     f50:	60 81       	ld	r22, Z
     f52:	71 81       	ldd	r23, Z+1	; 0x01
     f54:	82 81       	ldd	r24, Z+2	; 0x02
     f56:	93 81       	ldd	r25, Z+3	; 0x03
     f58:	0c 5f       	subi	r16, 0xFC	; 252
     f5a:	1f 4f       	sbci	r17, 0xFF	; 255
     f5c:	06 c0       	rjmp	.+12     	; 0xf6a <vfprintf+0x280>
     f5e:	60 81       	ld	r22, Z
     f60:	71 81       	ldd	r23, Z+1	; 0x01
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	0e 5f       	subi	r16, 0xFE	; 254
     f68:	1f 4f       	sbci	r17, 0xFF	; 255
     f6a:	a4 01       	movw	r20, r8
     f6c:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__ultoa_invert>
     f70:	a8 2e       	mov	r10, r24
     f72:	a8 18       	sub	r10, r8
     f74:	fb 2d       	mov	r31, r11
     f76:	ff 77       	andi	r31, 0x7F	; 127
     f78:	7f 2e       	mov	r7, r31
     f7a:	76 fe       	sbrs	r7, 6
     f7c:	0b c0       	rjmp	.+22     	; 0xf94 <vfprintf+0x2aa>
     f7e:	37 2d       	mov	r19, r7
     f80:	3e 7f       	andi	r19, 0xFE	; 254
     f82:	a5 14       	cp	r10, r5
     f84:	50 f4       	brcc	.+20     	; 0xf9a <vfprintf+0x2b0>
     f86:	74 fe       	sbrs	r7, 4
     f88:	0a c0       	rjmp	.+20     	; 0xf9e <vfprintf+0x2b4>
     f8a:	72 fc       	sbrc	r7, 2
     f8c:	08 c0       	rjmp	.+16     	; 0xf9e <vfprintf+0x2b4>
     f8e:	37 2d       	mov	r19, r7
     f90:	3e 7e       	andi	r19, 0xEE	; 238
     f92:	05 c0       	rjmp	.+10     	; 0xf9e <vfprintf+0x2b4>
     f94:	ba 2c       	mov	r11, r10
     f96:	37 2d       	mov	r19, r7
     f98:	03 c0       	rjmp	.+6      	; 0xfa0 <vfprintf+0x2b6>
     f9a:	ba 2c       	mov	r11, r10
     f9c:	01 c0       	rjmp	.+2      	; 0xfa0 <vfprintf+0x2b6>
     f9e:	b5 2c       	mov	r11, r5
     fa0:	34 ff       	sbrs	r19, 4
     fa2:	0d c0       	rjmp	.+26     	; 0xfbe <vfprintf+0x2d4>
     fa4:	fe 01       	movw	r30, r28
     fa6:	ea 0d       	add	r30, r10
     fa8:	f1 1d       	adc	r31, r1
     faa:	80 81       	ld	r24, Z
     fac:	80 33       	cpi	r24, 0x30	; 48
     fae:	11 f4       	brne	.+4      	; 0xfb4 <vfprintf+0x2ca>
     fb0:	39 7e       	andi	r19, 0xE9	; 233
     fb2:	09 c0       	rjmp	.+18     	; 0xfc6 <vfprintf+0x2dc>
     fb4:	32 ff       	sbrs	r19, 2
     fb6:	06 c0       	rjmp	.+12     	; 0xfc4 <vfprintf+0x2da>
     fb8:	b3 94       	inc	r11
     fba:	b3 94       	inc	r11
     fbc:	04 c0       	rjmp	.+8      	; 0xfc6 <vfprintf+0x2dc>
     fbe:	83 2f       	mov	r24, r19
     fc0:	86 78       	andi	r24, 0x86	; 134
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <vfprintf+0x2dc>
     fc4:	b3 94       	inc	r11
     fc6:	33 fd       	sbrc	r19, 3
     fc8:	13 c0       	rjmp	.+38     	; 0xff0 <vfprintf+0x306>
     fca:	30 ff       	sbrs	r19, 0
     fcc:	06 c0       	rjmp	.+12     	; 0xfda <vfprintf+0x2f0>
     fce:	5a 2c       	mov	r5, r10
     fd0:	b3 14       	cp	r11, r3
     fd2:	18 f4       	brcc	.+6      	; 0xfda <vfprintf+0x2f0>
     fd4:	53 0c       	add	r5, r3
     fd6:	5b 18       	sub	r5, r11
     fd8:	b3 2c       	mov	r11, r3
     fda:	b3 14       	cp	r11, r3
     fdc:	68 f4       	brcc	.+26     	; 0xff8 <vfprintf+0x30e>
     fde:	b7 01       	movw	r22, r14
     fe0:	80 e2       	ldi	r24, 0x20	; 32
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	3c 87       	std	Y+12, r19	; 0x0c
     fe6:	0e 94 ad 09 	call	0x135a	; 0x135a <fputc>
     fea:	b3 94       	inc	r11
     fec:	3c 85       	ldd	r19, Y+12	; 0x0c
     fee:	f5 cf       	rjmp	.-22     	; 0xfda <vfprintf+0x2f0>
     ff0:	b3 14       	cp	r11, r3
     ff2:	10 f4       	brcc	.+4      	; 0xff8 <vfprintf+0x30e>
     ff4:	3b 18       	sub	r3, r11
     ff6:	01 c0       	rjmp	.+2      	; 0xffa <vfprintf+0x310>
     ff8:	31 2c       	mov	r3, r1
     ffa:	34 ff       	sbrs	r19, 4
     ffc:	12 c0       	rjmp	.+36     	; 0x1022 <vfprintf+0x338>
     ffe:	b7 01       	movw	r22, r14
    1000:	80 e3       	ldi	r24, 0x30	; 48
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	3c 87       	std	Y+12, r19	; 0x0c
    1006:	0e 94 ad 09 	call	0x135a	; 0x135a <fputc>
    100a:	3c 85       	ldd	r19, Y+12	; 0x0c
    100c:	32 ff       	sbrs	r19, 2
    100e:	17 c0       	rjmp	.+46     	; 0x103e <vfprintf+0x354>
    1010:	31 fd       	sbrc	r19, 1
    1012:	03 c0       	rjmp	.+6      	; 0x101a <vfprintf+0x330>
    1014:	88 e7       	ldi	r24, 0x78	; 120
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	02 c0       	rjmp	.+4      	; 0x101e <vfprintf+0x334>
    101a:	88 e5       	ldi	r24, 0x58	; 88
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	b7 01       	movw	r22, r14
    1020:	0c c0       	rjmp	.+24     	; 0x103a <vfprintf+0x350>
    1022:	83 2f       	mov	r24, r19
    1024:	86 78       	andi	r24, 0x86	; 134
    1026:	59 f0       	breq	.+22     	; 0x103e <vfprintf+0x354>
    1028:	31 ff       	sbrs	r19, 1
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <vfprintf+0x346>
    102c:	8b e2       	ldi	r24, 0x2B	; 43
    102e:	01 c0       	rjmp	.+2      	; 0x1032 <vfprintf+0x348>
    1030:	80 e2       	ldi	r24, 0x20	; 32
    1032:	37 fd       	sbrc	r19, 7
    1034:	8d e2       	ldi	r24, 0x2D	; 45
    1036:	b7 01       	movw	r22, r14
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	0e 94 ad 09 	call	0x135a	; 0x135a <fputc>
    103e:	a5 14       	cp	r10, r5
    1040:	38 f4       	brcc	.+14     	; 0x1050 <vfprintf+0x366>
    1042:	b7 01       	movw	r22, r14
    1044:	80 e3       	ldi	r24, 0x30	; 48
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	0e 94 ad 09 	call	0x135a	; 0x135a <fputc>
    104c:	5a 94       	dec	r5
    104e:	f7 cf       	rjmp	.-18     	; 0x103e <vfprintf+0x354>
    1050:	aa 94       	dec	r10
    1052:	f4 01       	movw	r30, r8
    1054:	ea 0d       	add	r30, r10
    1056:	f1 1d       	adc	r31, r1
    1058:	80 81       	ld	r24, Z
    105a:	b7 01       	movw	r22, r14
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	0e 94 ad 09 	call	0x135a	; 0x135a <fputc>
    1062:	a1 10       	cpse	r10, r1
    1064:	f5 cf       	rjmp	.-22     	; 0x1050 <vfprintf+0x366>
    1066:	33 20       	and	r3, r3
    1068:	09 f4       	brne	.+2      	; 0x106c <vfprintf+0x382>
    106a:	51 ce       	rjmp	.-862    	; 0xd0e <vfprintf+0x24>
    106c:	b7 01       	movw	r22, r14
    106e:	80 e2       	ldi	r24, 0x20	; 32
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0e 94 ad 09 	call	0x135a	; 0x135a <fputc>
    1076:	3a 94       	dec	r3
    1078:	f6 cf       	rjmp	.-20     	; 0x1066 <vfprintf+0x37c>
    107a:	f7 01       	movw	r30, r14
    107c:	86 81       	ldd	r24, Z+6	; 0x06
    107e:	97 81       	ldd	r25, Z+7	; 0x07
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <vfprintf+0x39c>
    1082:	8f ef       	ldi	r24, 0xFF	; 255
    1084:	9f ef       	ldi	r25, 0xFF	; 255
    1086:	2c 96       	adiw	r28, 0x0c	; 12
    1088:	e2 e1       	ldi	r30, 0x12	; 18
    108a:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <__epilogue_restores__>

0000108e <calloc>:
    108e:	0f 93       	push	r16
    1090:	1f 93       	push	r17
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	86 9f       	mul	r24, r22
    1098:	80 01       	movw	r16, r0
    109a:	87 9f       	mul	r24, r23
    109c:	10 0d       	add	r17, r0
    109e:	96 9f       	mul	r25, r22
    10a0:	10 0d       	add	r17, r0
    10a2:	11 24       	eor	r1, r1
    10a4:	c8 01       	movw	r24, r16
    10a6:	0e 94 63 08 	call	0x10c6	; 0x10c6 <malloc>
    10aa:	ec 01       	movw	r28, r24
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	29 f0       	breq	.+10     	; 0x10ba <calloc+0x2c>
    10b0:	a8 01       	movw	r20, r16
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	0e 94 9b 09 	call	0x1336	; 0x1336 <memset>
    10ba:	ce 01       	movw	r24, r28
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	1f 91       	pop	r17
    10c2:	0f 91       	pop	r16
    10c4:	08 95       	ret

000010c6 <malloc>:
    10c6:	cf 93       	push	r28
    10c8:	df 93       	push	r29
    10ca:	82 30       	cpi	r24, 0x02	; 2
    10cc:	91 05       	cpc	r25, r1
    10ce:	10 f4       	brcc	.+4      	; 0x10d4 <malloc+0xe>
    10d0:	82 e0       	ldi	r24, 0x02	; 2
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	e0 91 6c 04 	lds	r30, 0x046C
    10d8:	f0 91 6d 04 	lds	r31, 0x046D
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	c0 e0       	ldi	r28, 0x00	; 0
    10e2:	d0 e0       	ldi	r29, 0x00	; 0
    10e4:	30 97       	sbiw	r30, 0x00	; 0
    10e6:	11 f1       	breq	.+68     	; 0x112c <malloc+0x66>
    10e8:	40 81       	ld	r20, Z
    10ea:	51 81       	ldd	r21, Z+1	; 0x01
    10ec:	48 17       	cp	r20, r24
    10ee:	59 07       	cpc	r21, r25
    10f0:	c0 f0       	brcs	.+48     	; 0x1122 <malloc+0x5c>
    10f2:	48 17       	cp	r20, r24
    10f4:	59 07       	cpc	r21, r25
    10f6:	61 f4       	brne	.+24     	; 0x1110 <malloc+0x4a>
    10f8:	82 81       	ldd	r24, Z+2	; 0x02
    10fa:	93 81       	ldd	r25, Z+3	; 0x03
    10fc:	20 97       	sbiw	r28, 0x00	; 0
    10fe:	19 f0       	breq	.+6      	; 0x1106 <malloc+0x40>
    1100:	9b 83       	std	Y+3, r25	; 0x03
    1102:	8a 83       	std	Y+2, r24	; 0x02
    1104:	2b c0       	rjmp	.+86     	; 0x115c <malloc+0x96>
    1106:	90 93 6d 04 	sts	0x046D, r25
    110a:	80 93 6c 04 	sts	0x046C, r24
    110e:	26 c0       	rjmp	.+76     	; 0x115c <malloc+0x96>
    1110:	21 15       	cp	r18, r1
    1112:	31 05       	cpc	r19, r1
    1114:	19 f0       	breq	.+6      	; 0x111c <malloc+0x56>
    1116:	42 17       	cp	r20, r18
    1118:	53 07       	cpc	r21, r19
    111a:	18 f4       	brcc	.+6      	; 0x1122 <malloc+0x5c>
    111c:	9a 01       	movw	r18, r20
    111e:	be 01       	movw	r22, r28
    1120:	df 01       	movw	r26, r30
    1122:	ef 01       	movw	r28, r30
    1124:	02 80       	ldd	r0, Z+2	; 0x02
    1126:	f3 81       	ldd	r31, Z+3	; 0x03
    1128:	e0 2d       	mov	r30, r0
    112a:	dc cf       	rjmp	.-72     	; 0x10e4 <malloc+0x1e>
    112c:	21 15       	cp	r18, r1
    112e:	31 05       	cpc	r19, r1
    1130:	09 f1       	breq	.+66     	; 0x1174 <malloc+0xae>
    1132:	28 1b       	sub	r18, r24
    1134:	39 0b       	sbc	r19, r25
    1136:	24 30       	cpi	r18, 0x04	; 4
    1138:	31 05       	cpc	r19, r1
    113a:	90 f4       	brcc	.+36     	; 0x1160 <malloc+0x9a>
    113c:	12 96       	adiw	r26, 0x02	; 2
    113e:	8d 91       	ld	r24, X+
    1140:	9c 91       	ld	r25, X
    1142:	13 97       	sbiw	r26, 0x03	; 3
    1144:	61 15       	cp	r22, r1
    1146:	71 05       	cpc	r23, r1
    1148:	21 f0       	breq	.+8      	; 0x1152 <malloc+0x8c>
    114a:	fb 01       	movw	r30, r22
    114c:	93 83       	std	Z+3, r25	; 0x03
    114e:	82 83       	std	Z+2, r24	; 0x02
    1150:	04 c0       	rjmp	.+8      	; 0x115a <malloc+0x94>
    1152:	90 93 6d 04 	sts	0x046D, r25
    1156:	80 93 6c 04 	sts	0x046C, r24
    115a:	fd 01       	movw	r30, r26
    115c:	32 96       	adiw	r30, 0x02	; 2
    115e:	44 c0       	rjmp	.+136    	; 0x11e8 <malloc+0x122>
    1160:	fd 01       	movw	r30, r26
    1162:	e2 0f       	add	r30, r18
    1164:	f3 1f       	adc	r31, r19
    1166:	81 93       	st	Z+, r24
    1168:	91 93       	st	Z+, r25
    116a:	22 50       	subi	r18, 0x02	; 2
    116c:	31 09       	sbc	r19, r1
    116e:	2d 93       	st	X+, r18
    1170:	3c 93       	st	X, r19
    1172:	3a c0       	rjmp	.+116    	; 0x11e8 <malloc+0x122>
    1174:	20 91 6a 04 	lds	r18, 0x046A
    1178:	30 91 6b 04 	lds	r19, 0x046B
    117c:	23 2b       	or	r18, r19
    117e:	41 f4       	brne	.+16     	; 0x1190 <malloc+0xca>
    1180:	20 91 02 01 	lds	r18, 0x0102
    1184:	30 91 03 01 	lds	r19, 0x0103
    1188:	30 93 6b 04 	sts	0x046B, r19
    118c:	20 93 6a 04 	sts	0x046A, r18
    1190:	20 91 00 01 	lds	r18, 0x0100
    1194:	30 91 01 01 	lds	r19, 0x0101
    1198:	21 15       	cp	r18, r1
    119a:	31 05       	cpc	r19, r1
    119c:	41 f4       	brne	.+16     	; 0x11ae <malloc+0xe8>
    119e:	2d b7       	in	r18, 0x3d	; 61
    11a0:	3e b7       	in	r19, 0x3e	; 62
    11a2:	40 91 04 01 	lds	r20, 0x0104
    11a6:	50 91 05 01 	lds	r21, 0x0105
    11aa:	24 1b       	sub	r18, r20
    11ac:	35 0b       	sbc	r19, r21
    11ae:	e0 91 6a 04 	lds	r30, 0x046A
    11b2:	f0 91 6b 04 	lds	r31, 0x046B
    11b6:	e2 17       	cp	r30, r18
    11b8:	f3 07       	cpc	r31, r19
    11ba:	a0 f4       	brcc	.+40     	; 0x11e4 <malloc+0x11e>
    11bc:	2e 1b       	sub	r18, r30
    11be:	3f 0b       	sbc	r19, r31
    11c0:	28 17       	cp	r18, r24
    11c2:	39 07       	cpc	r19, r25
    11c4:	78 f0       	brcs	.+30     	; 0x11e4 <malloc+0x11e>
    11c6:	ac 01       	movw	r20, r24
    11c8:	4e 5f       	subi	r20, 0xFE	; 254
    11ca:	5f 4f       	sbci	r21, 0xFF	; 255
    11cc:	24 17       	cp	r18, r20
    11ce:	35 07       	cpc	r19, r21
    11d0:	48 f0       	brcs	.+18     	; 0x11e4 <malloc+0x11e>
    11d2:	4e 0f       	add	r20, r30
    11d4:	5f 1f       	adc	r21, r31
    11d6:	50 93 6b 04 	sts	0x046B, r21
    11da:	40 93 6a 04 	sts	0x046A, r20
    11de:	81 93       	st	Z+, r24
    11e0:	91 93       	st	Z+, r25
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <malloc+0x122>
    11e4:	e0 e0       	ldi	r30, 0x00	; 0
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	cf 01       	movw	r24, r30
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	08 95       	ret

000011f0 <free>:
    11f0:	0f 93       	push	r16
    11f2:	1f 93       	push	r17
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	09 f4       	brne	.+2      	; 0x11fe <free+0xe>
    11fc:	8c c0       	rjmp	.+280    	; 0x1316 <free+0x126>
    11fe:	fc 01       	movw	r30, r24
    1200:	32 97       	sbiw	r30, 0x02	; 2
    1202:	13 82       	std	Z+3, r1	; 0x03
    1204:	12 82       	std	Z+2, r1	; 0x02
    1206:	00 91 6c 04 	lds	r16, 0x046C
    120a:	10 91 6d 04 	lds	r17, 0x046D
    120e:	01 15       	cp	r16, r1
    1210:	11 05       	cpc	r17, r1
    1212:	81 f4       	brne	.+32     	; 0x1234 <free+0x44>
    1214:	20 81       	ld	r18, Z
    1216:	31 81       	ldd	r19, Z+1	; 0x01
    1218:	82 0f       	add	r24, r18
    121a:	93 1f       	adc	r25, r19
    121c:	20 91 6a 04 	lds	r18, 0x046A
    1220:	30 91 6b 04 	lds	r19, 0x046B
    1224:	28 17       	cp	r18, r24
    1226:	39 07       	cpc	r19, r25
    1228:	79 f5       	brne	.+94     	; 0x1288 <free+0x98>
    122a:	f0 93 6b 04 	sts	0x046B, r31
    122e:	e0 93 6a 04 	sts	0x046A, r30
    1232:	71 c0       	rjmp	.+226    	; 0x1316 <free+0x126>
    1234:	d8 01       	movw	r26, r16
    1236:	40 e0       	ldi	r20, 0x00	; 0
    1238:	50 e0       	ldi	r21, 0x00	; 0
    123a:	ae 17       	cp	r26, r30
    123c:	bf 07       	cpc	r27, r31
    123e:	50 f4       	brcc	.+20     	; 0x1254 <free+0x64>
    1240:	12 96       	adiw	r26, 0x02	; 2
    1242:	2d 91       	ld	r18, X+
    1244:	3c 91       	ld	r19, X
    1246:	13 97       	sbiw	r26, 0x03	; 3
    1248:	ad 01       	movw	r20, r26
    124a:	21 15       	cp	r18, r1
    124c:	31 05       	cpc	r19, r1
    124e:	09 f1       	breq	.+66     	; 0x1292 <free+0xa2>
    1250:	d9 01       	movw	r26, r18
    1252:	f3 cf       	rjmp	.-26     	; 0x123a <free+0x4a>
    1254:	9d 01       	movw	r18, r26
    1256:	da 01       	movw	r26, r20
    1258:	33 83       	std	Z+3, r19	; 0x03
    125a:	22 83       	std	Z+2, r18	; 0x02
    125c:	60 81       	ld	r22, Z
    125e:	71 81       	ldd	r23, Z+1	; 0x01
    1260:	86 0f       	add	r24, r22
    1262:	97 1f       	adc	r25, r23
    1264:	82 17       	cp	r24, r18
    1266:	93 07       	cpc	r25, r19
    1268:	69 f4       	brne	.+26     	; 0x1284 <free+0x94>
    126a:	ec 01       	movw	r28, r24
    126c:	28 81       	ld	r18, Y
    126e:	39 81       	ldd	r19, Y+1	; 0x01
    1270:	26 0f       	add	r18, r22
    1272:	37 1f       	adc	r19, r23
    1274:	2e 5f       	subi	r18, 0xFE	; 254
    1276:	3f 4f       	sbci	r19, 0xFF	; 255
    1278:	31 83       	std	Z+1, r19	; 0x01
    127a:	20 83       	st	Z, r18
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	9b 81       	ldd	r25, Y+3	; 0x03
    1280:	93 83       	std	Z+3, r25	; 0x03
    1282:	82 83       	std	Z+2, r24	; 0x02
    1284:	45 2b       	or	r20, r21
    1286:	29 f4       	brne	.+10     	; 0x1292 <free+0xa2>
    1288:	f0 93 6d 04 	sts	0x046D, r31
    128c:	e0 93 6c 04 	sts	0x046C, r30
    1290:	42 c0       	rjmp	.+132    	; 0x1316 <free+0x126>
    1292:	13 96       	adiw	r26, 0x03	; 3
    1294:	fc 93       	st	X, r31
    1296:	ee 93       	st	-X, r30
    1298:	12 97       	sbiw	r26, 0x02	; 2
    129a:	ed 01       	movw	r28, r26
    129c:	49 91       	ld	r20, Y+
    129e:	59 91       	ld	r21, Y+
    12a0:	9e 01       	movw	r18, r28
    12a2:	24 0f       	add	r18, r20
    12a4:	35 1f       	adc	r19, r21
    12a6:	e2 17       	cp	r30, r18
    12a8:	f3 07       	cpc	r31, r19
    12aa:	71 f4       	brne	.+28     	; 0x12c8 <free+0xd8>
    12ac:	80 81       	ld	r24, Z
    12ae:	91 81       	ldd	r25, Z+1	; 0x01
    12b0:	84 0f       	add	r24, r20
    12b2:	95 1f       	adc	r25, r21
    12b4:	02 96       	adiw	r24, 0x02	; 2
    12b6:	11 96       	adiw	r26, 0x01	; 1
    12b8:	9c 93       	st	X, r25
    12ba:	8e 93       	st	-X, r24
    12bc:	82 81       	ldd	r24, Z+2	; 0x02
    12be:	93 81       	ldd	r25, Z+3	; 0x03
    12c0:	13 96       	adiw	r26, 0x03	; 3
    12c2:	9c 93       	st	X, r25
    12c4:	8e 93       	st	-X, r24
    12c6:	12 97       	sbiw	r26, 0x02	; 2
    12c8:	e0 e0       	ldi	r30, 0x00	; 0
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	d8 01       	movw	r26, r16
    12ce:	12 96       	adiw	r26, 0x02	; 2
    12d0:	8d 91       	ld	r24, X+
    12d2:	9c 91       	ld	r25, X
    12d4:	13 97       	sbiw	r26, 0x03	; 3
    12d6:	00 97       	sbiw	r24, 0x00	; 0
    12d8:	19 f0       	breq	.+6      	; 0x12e0 <free+0xf0>
    12da:	f8 01       	movw	r30, r16
    12dc:	8c 01       	movw	r16, r24
    12de:	f6 cf       	rjmp	.-20     	; 0x12cc <free+0xdc>
    12e0:	8d 91       	ld	r24, X+
    12e2:	9c 91       	ld	r25, X
    12e4:	98 01       	movw	r18, r16
    12e6:	2e 5f       	subi	r18, 0xFE	; 254
    12e8:	3f 4f       	sbci	r19, 0xFF	; 255
    12ea:	82 0f       	add	r24, r18
    12ec:	93 1f       	adc	r25, r19
    12ee:	20 91 6a 04 	lds	r18, 0x046A
    12f2:	30 91 6b 04 	lds	r19, 0x046B
    12f6:	28 17       	cp	r18, r24
    12f8:	39 07       	cpc	r19, r25
    12fa:	69 f4       	brne	.+26     	; 0x1316 <free+0x126>
    12fc:	30 97       	sbiw	r30, 0x00	; 0
    12fe:	29 f4       	brne	.+10     	; 0x130a <free+0x11a>
    1300:	10 92 6d 04 	sts	0x046D, r1
    1304:	10 92 6c 04 	sts	0x046C, r1
    1308:	02 c0       	rjmp	.+4      	; 0x130e <free+0x11e>
    130a:	13 82       	std	Z+3, r1	; 0x03
    130c:	12 82       	std	Z+2, r1	; 0x02
    130e:	10 93 6b 04 	sts	0x046B, r17
    1312:	00 93 6a 04 	sts	0x046A, r16
    1316:	df 91       	pop	r29
    1318:	cf 91       	pop	r28
    131a:	1f 91       	pop	r17
    131c:	0f 91       	pop	r16
    131e:	08 95       	ret

00001320 <strnlen_P>:
    1320:	fc 01       	movw	r30, r24
    1322:	05 90       	lpm	r0, Z+
    1324:	61 50       	subi	r22, 0x01	; 1
    1326:	70 40       	sbci	r23, 0x00	; 0
    1328:	01 10       	cpse	r0, r1
    132a:	d8 f7       	brcc	.-10     	; 0x1322 <strnlen_P+0x2>
    132c:	80 95       	com	r24
    132e:	90 95       	com	r25
    1330:	8e 0f       	add	r24, r30
    1332:	9f 1f       	adc	r25, r31
    1334:	08 95       	ret

00001336 <memset>:
    1336:	dc 01       	movw	r26, r24
    1338:	01 c0       	rjmp	.+2      	; 0x133c <memset+0x6>
    133a:	6d 93       	st	X+, r22
    133c:	41 50       	subi	r20, 0x01	; 1
    133e:	50 40       	sbci	r21, 0x00	; 0
    1340:	e0 f7       	brcc	.-8      	; 0x133a <memset+0x4>
    1342:	08 95       	ret

00001344 <strnlen>:
    1344:	fc 01       	movw	r30, r24
    1346:	61 50       	subi	r22, 0x01	; 1
    1348:	70 40       	sbci	r23, 0x00	; 0
    134a:	01 90       	ld	r0, Z+
    134c:	01 10       	cpse	r0, r1
    134e:	d8 f7       	brcc	.-10     	; 0x1346 <strnlen+0x2>
    1350:	80 95       	com	r24
    1352:	90 95       	com	r25
    1354:	8e 0f       	add	r24, r30
    1356:	9f 1f       	adc	r25, r31
    1358:	08 95       	ret

0000135a <fputc>:
    135a:	0f 93       	push	r16
    135c:	1f 93       	push	r17
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
    1362:	fb 01       	movw	r30, r22
    1364:	23 81       	ldd	r18, Z+3	; 0x03
    1366:	21 fd       	sbrc	r18, 1
    1368:	03 c0       	rjmp	.+6      	; 0x1370 <fputc+0x16>
    136a:	8f ef       	ldi	r24, 0xFF	; 255
    136c:	9f ef       	ldi	r25, 0xFF	; 255
    136e:	28 c0       	rjmp	.+80     	; 0x13c0 <fputc+0x66>
    1370:	22 ff       	sbrs	r18, 2
    1372:	16 c0       	rjmp	.+44     	; 0x13a0 <fputc+0x46>
    1374:	46 81       	ldd	r20, Z+6	; 0x06
    1376:	57 81       	ldd	r21, Z+7	; 0x07
    1378:	24 81       	ldd	r18, Z+4	; 0x04
    137a:	35 81       	ldd	r19, Z+5	; 0x05
    137c:	42 17       	cp	r20, r18
    137e:	53 07       	cpc	r21, r19
    1380:	44 f4       	brge	.+16     	; 0x1392 <fputc+0x38>
    1382:	a0 81       	ld	r26, Z
    1384:	b1 81       	ldd	r27, Z+1	; 0x01
    1386:	9d 01       	movw	r18, r26
    1388:	2f 5f       	subi	r18, 0xFF	; 255
    138a:	3f 4f       	sbci	r19, 0xFF	; 255
    138c:	31 83       	std	Z+1, r19	; 0x01
    138e:	20 83       	st	Z, r18
    1390:	8c 93       	st	X, r24
    1392:	26 81       	ldd	r18, Z+6	; 0x06
    1394:	37 81       	ldd	r19, Z+7	; 0x07
    1396:	2f 5f       	subi	r18, 0xFF	; 255
    1398:	3f 4f       	sbci	r19, 0xFF	; 255
    139a:	37 83       	std	Z+7, r19	; 0x07
    139c:	26 83       	std	Z+6, r18	; 0x06
    139e:	10 c0       	rjmp	.+32     	; 0x13c0 <fputc+0x66>
    13a0:	eb 01       	movw	r28, r22
    13a2:	09 2f       	mov	r16, r25
    13a4:	18 2f       	mov	r17, r24
    13a6:	00 84       	ldd	r0, Z+8	; 0x08
    13a8:	f1 85       	ldd	r31, Z+9	; 0x09
    13aa:	e0 2d       	mov	r30, r0
    13ac:	09 95       	icall
    13ae:	89 2b       	or	r24, r25
    13b0:	e1 f6       	brne	.-72     	; 0x136a <fputc+0x10>
    13b2:	8e 81       	ldd	r24, Y+6	; 0x06
    13b4:	9f 81       	ldd	r25, Y+7	; 0x07
    13b6:	01 96       	adiw	r24, 0x01	; 1
    13b8:	9f 83       	std	Y+7, r25	; 0x07
    13ba:	8e 83       	std	Y+6, r24	; 0x06
    13bc:	81 2f       	mov	r24, r17
    13be:	90 2f       	mov	r25, r16
    13c0:	df 91       	pop	r29
    13c2:	cf 91       	pop	r28
    13c4:	1f 91       	pop	r17
    13c6:	0f 91       	pop	r16
    13c8:	08 95       	ret

000013ca <__ultoa_invert>:
    13ca:	fa 01       	movw	r30, r20
    13cc:	aa 27       	eor	r26, r26
    13ce:	28 30       	cpi	r18, 0x08	; 8
    13d0:	51 f1       	breq	.+84     	; 0x1426 <__ultoa_invert+0x5c>
    13d2:	20 31       	cpi	r18, 0x10	; 16
    13d4:	81 f1       	breq	.+96     	; 0x1436 <__ultoa_invert+0x6c>
    13d6:	e8 94       	clt
    13d8:	6f 93       	push	r22
    13da:	6e 7f       	andi	r22, 0xFE	; 254
    13dc:	6e 5f       	subi	r22, 0xFE	; 254
    13de:	7f 4f       	sbci	r23, 0xFF	; 255
    13e0:	8f 4f       	sbci	r24, 0xFF	; 255
    13e2:	9f 4f       	sbci	r25, 0xFF	; 255
    13e4:	af 4f       	sbci	r26, 0xFF	; 255
    13e6:	b1 e0       	ldi	r27, 0x01	; 1
    13e8:	3e d0       	rcall	.+124    	; 0x1466 <__ultoa_invert+0x9c>
    13ea:	b4 e0       	ldi	r27, 0x04	; 4
    13ec:	3c d0       	rcall	.+120    	; 0x1466 <__ultoa_invert+0x9c>
    13ee:	67 0f       	add	r22, r23
    13f0:	78 1f       	adc	r23, r24
    13f2:	89 1f       	adc	r24, r25
    13f4:	9a 1f       	adc	r25, r26
    13f6:	a1 1d       	adc	r26, r1
    13f8:	68 0f       	add	r22, r24
    13fa:	79 1f       	adc	r23, r25
    13fc:	8a 1f       	adc	r24, r26
    13fe:	91 1d       	adc	r25, r1
    1400:	a1 1d       	adc	r26, r1
    1402:	6a 0f       	add	r22, r26
    1404:	71 1d       	adc	r23, r1
    1406:	81 1d       	adc	r24, r1
    1408:	91 1d       	adc	r25, r1
    140a:	a1 1d       	adc	r26, r1
    140c:	20 d0       	rcall	.+64     	; 0x144e <__ultoa_invert+0x84>
    140e:	09 f4       	brne	.+2      	; 0x1412 <__ultoa_invert+0x48>
    1410:	68 94       	set
    1412:	3f 91       	pop	r19
    1414:	2a e0       	ldi	r18, 0x0A	; 10
    1416:	26 9f       	mul	r18, r22
    1418:	11 24       	eor	r1, r1
    141a:	30 19       	sub	r19, r0
    141c:	30 5d       	subi	r19, 0xD0	; 208
    141e:	31 93       	st	Z+, r19
    1420:	de f6       	brtc	.-74     	; 0x13d8 <__ultoa_invert+0xe>
    1422:	cf 01       	movw	r24, r30
    1424:	08 95       	ret
    1426:	46 2f       	mov	r20, r22
    1428:	47 70       	andi	r20, 0x07	; 7
    142a:	40 5d       	subi	r20, 0xD0	; 208
    142c:	41 93       	st	Z+, r20
    142e:	b3 e0       	ldi	r27, 0x03	; 3
    1430:	0f d0       	rcall	.+30     	; 0x1450 <__ultoa_invert+0x86>
    1432:	c9 f7       	brne	.-14     	; 0x1426 <__ultoa_invert+0x5c>
    1434:	f6 cf       	rjmp	.-20     	; 0x1422 <__ultoa_invert+0x58>
    1436:	46 2f       	mov	r20, r22
    1438:	4f 70       	andi	r20, 0x0F	; 15
    143a:	40 5d       	subi	r20, 0xD0	; 208
    143c:	4a 33       	cpi	r20, 0x3A	; 58
    143e:	18 f0       	brcs	.+6      	; 0x1446 <__ultoa_invert+0x7c>
    1440:	49 5d       	subi	r20, 0xD9	; 217
    1442:	31 fd       	sbrc	r19, 1
    1444:	40 52       	subi	r20, 0x20	; 32
    1446:	41 93       	st	Z+, r20
    1448:	02 d0       	rcall	.+4      	; 0x144e <__ultoa_invert+0x84>
    144a:	a9 f7       	brne	.-22     	; 0x1436 <__ultoa_invert+0x6c>
    144c:	ea cf       	rjmp	.-44     	; 0x1422 <__ultoa_invert+0x58>
    144e:	b4 e0       	ldi	r27, 0x04	; 4
    1450:	a6 95       	lsr	r26
    1452:	97 95       	ror	r25
    1454:	87 95       	ror	r24
    1456:	77 95       	ror	r23
    1458:	67 95       	ror	r22
    145a:	ba 95       	dec	r27
    145c:	c9 f7       	brne	.-14     	; 0x1450 <__ultoa_invert+0x86>
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	61 05       	cpc	r22, r1
    1462:	71 05       	cpc	r23, r1
    1464:	08 95       	ret
    1466:	9b 01       	movw	r18, r22
    1468:	ac 01       	movw	r20, r24
    146a:	0a 2e       	mov	r0, r26
    146c:	06 94       	lsr	r0
    146e:	57 95       	ror	r21
    1470:	47 95       	ror	r20
    1472:	37 95       	ror	r19
    1474:	27 95       	ror	r18
    1476:	ba 95       	dec	r27
    1478:	c9 f7       	brne	.-14     	; 0x146c <__ultoa_invert+0xa2>
    147a:	62 0f       	add	r22, r18
    147c:	73 1f       	adc	r23, r19
    147e:	84 1f       	adc	r24, r20
    1480:	95 1f       	adc	r25, r21
    1482:	a0 1d       	adc	r26, r0
    1484:	08 95       	ret

00001486 <__prologue_saves__>:
    1486:	2f 92       	push	r2
    1488:	3f 92       	push	r3
    148a:	4f 92       	push	r4
    148c:	5f 92       	push	r5
    148e:	6f 92       	push	r6
    1490:	7f 92       	push	r7
    1492:	8f 92       	push	r8
    1494:	9f 92       	push	r9
    1496:	af 92       	push	r10
    1498:	bf 92       	push	r11
    149a:	cf 92       	push	r12
    149c:	df 92       	push	r13
    149e:	ef 92       	push	r14
    14a0:	ff 92       	push	r15
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	ca 1b       	sub	r28, r26
    14b0:	db 0b       	sbc	r29, r27
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	f8 94       	cli
    14b6:	de bf       	out	0x3e, r29	; 62
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	cd bf       	out	0x3d, r28	; 61
    14bc:	09 94       	ijmp

000014be <__epilogue_restores__>:
    14be:	2a 88       	ldd	r2, Y+18	; 0x12
    14c0:	39 88       	ldd	r3, Y+17	; 0x11
    14c2:	48 88       	ldd	r4, Y+16	; 0x10
    14c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    14c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    14c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    14ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    14cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    14ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    14d0:	b9 84       	ldd	r11, Y+9	; 0x09
    14d2:	c8 84       	ldd	r12, Y+8	; 0x08
    14d4:	df 80       	ldd	r13, Y+7	; 0x07
    14d6:	ee 80       	ldd	r14, Y+6	; 0x06
    14d8:	fd 80       	ldd	r15, Y+5	; 0x05
    14da:	0c 81       	ldd	r16, Y+4	; 0x04
    14dc:	1b 81       	ldd	r17, Y+3	; 0x03
    14de:	aa 81       	ldd	r26, Y+2	; 0x02
    14e0:	b9 81       	ldd	r27, Y+1	; 0x01
    14e2:	ce 0f       	add	r28, r30
    14e4:	d1 1d       	adc	r29, r1
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	f8 94       	cli
    14ea:	de bf       	out	0x3e, r29	; 62
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	cd bf       	out	0x3d, r28	; 61
    14f0:	ed 01       	movw	r28, r26
    14f2:	08 95       	ret

000014f4 <_exit>:
    14f4:	f8 94       	cli

000014f6 <__stop_program>:
    14f6:	ff cf       	rjmp	.-2      	; 0x14f6 <__stop_program>
